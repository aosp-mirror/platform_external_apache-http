// Signature format: 2.0
package android.net.compatibility {

  public class WebAddress {
    ctor public WebAddress(String) throws java.lang.IllegalArgumentException;
    method public String getAuthInfo();
    method public String getHost();
    method public String getPath();
    method public int getPort();
    method public String getScheme();
    method public void setAuthInfo(String);
    method public void setHost(String);
    method public void setPath(String);
    method public void setPort(int);
    method public void setScheme(String);
  }

}

package android.net.http {

  public final class AndroidHttpClient implements org.apache.http.client.HttpClient {
    method public void close();
    method public void disableCurlLogging();
    method public void enableCurlLogging(String, int);
    method public org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) throws java.io.IOException;
    method public org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException;
    method public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest) throws java.io.IOException;
    method public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException;
    method public <T> T execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public <T> T execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public <T> T execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public <T> T execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public static org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[], android.content.ContentResolver) throws java.io.IOException;
    method public org.apache.http.conn.ClientConnectionManager getConnectionManager();
    method public static long getMinGzipSize(android.content.ContentResolver);
    method public org.apache.http.params.HttpParams getParams();
    method public static java.io.InputStream getUngzippedContent(org.apache.http.HttpEntity) throws java.io.IOException;
    method public static void modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest);
    method public static android.net.http.AndroidHttpClient newInstance(String, android.content.Context);
    method public static android.net.http.AndroidHttpClient newInstance(String);
    method public static long parseDate(String);
    field public static long DEFAULT_SYNC_MIN_GZIP_BYTES;
  }

  public class AndroidHttpClientConnection implements org.apache.http.HttpConnection org.apache.http.HttpInetConnection {
    ctor public AndroidHttpClientConnection();
    method public void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public void close() throws java.io.IOException;
    method protected void doFlush() throws java.io.IOException;
    method public void flush() throws java.io.IOException;
    method public java.net.InetAddress getLocalAddress();
    method public int getLocalPort();
    method public org.apache.http.HttpConnectionMetrics getMetrics();
    method public java.net.InetAddress getRemoteAddress();
    method public int getRemotePort();
    method public int getSocketTimeout();
    method public boolean isOpen();
    method public boolean isStale();
    method public org.apache.http.StatusLine parseResponseHeader(android.net.http.Headers) throws java.io.IOException, org.apache.http.ParseException;
    method public org.apache.http.HttpEntity receiveResponseEntity(android.net.http.Headers);
    method public void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException;
    method public void sendRequestHeader(org.apache.http.HttpRequest) throws org.apache.http.HttpException, java.io.IOException;
    method public void setSocketTimeout(int);
    method public void shutdown() throws java.io.IOException;
  }

  public class CertificateChainValidator {
    method public android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection, javax.net.ssl.SSLSocket, String) throws java.io.IOException;
    method public static android.net.http.CertificateChainValidator getInstance();
    method public static void handleTrustStorageUpdate();
    method public static android.net.http.SslError verifyServerCertificates(byte[][], String, String) throws java.io.IOException;
  }

  public abstract class Connection {
  }

  public class DelegatingSSLSession implements javax.net.ssl.SSLSession {
    ctor protected DelegatingSSLSession();
    method public int getApplicationBufferSize();
    method public String getCipherSuite();
    method public long getCreationTime();
    method public byte[] getId();
    method public long getLastAccessedTime();
    method public java.security.cert.Certificate[] getLocalCertificates();
    method public java.security.Principal getLocalPrincipal();
    method public int getPacketBufferSize();
    method public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException;
    method public java.security.cert.Certificate[] getPeerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException;
    method public String getPeerHost();
    method public int getPeerPort();
    method public java.security.Principal getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException;
    method public String getProtocol();
    method public javax.net.ssl.SSLSessionContext getSessionContext();
    method public Object getValue(String);
    method public String[] getValueNames();
    method public void invalidate();
    method public boolean isValid();
    method public void putValue(String, Object);
    method public void removeValue(String);
  }

  public static class DelegatingSSLSession.CertificateWrap extends android.net.http.DelegatingSSLSession {
    ctor public DelegatingSSLSession.CertificateWrap(java.security.cert.Certificate);
  }

  public interface EventHandler {
    method public void certificate(android.net.http.SslCertificate);
    method public void data(byte[], int);
    method public void endData();
    method public void error(int, String);
    method public boolean handleSslErrorRequest(android.net.http.SslError);
    method public void headers(android.net.http.Headers);
    method public void status(int, int, int, String);
    field public static final int ERROR = -1; // 0xffffffff
    field public static final int ERROR_AUTH = -4; // 0xfffffffc
    field public static final int ERROR_BAD_URL = -12; // 0xfffffff4
    field public static final int ERROR_CONNECT = -6; // 0xfffffffa
    field public static final int ERROR_FAILED_SSL_HANDSHAKE = -11; // 0xfffffff5
    field public static final int ERROR_IO = -7; // 0xfffffff9
    field public static final int ERROR_LOOKUP = -2; // 0xfffffffe
    field public static final int ERROR_PROXYAUTH = -5; // 0xfffffffb
    field public static final int ERROR_REDIRECT_LOOP = -9; // 0xfffffff7
    field public static final int ERROR_TIMEOUT = -8; // 0xfffffff8
    field public static final int ERROR_UNSUPPORTED_AUTH_SCHEME = -3; // 0xfffffffd
    field public static final int ERROR_UNSUPPORTED_SCHEME = -10; // 0xfffffff6
    field public static final int FILE_ERROR = -13; // 0xfffffff3
    field public static final int FILE_NOT_FOUND_ERROR = -14; // 0xfffffff2
    field public static final int OK = 0; // 0x0
    field public static final int TOO_MANY_REQUESTS_ERROR = -15; // 0xfffffff1
  }

  public final class Headers {
    ctor public Headers();
    method public String getAcceptRanges();
    method public String getCacheControl();
    method public int getConnectionType();
    method public String getContentDisposition();
    method public String getContentEncoding();
    method public long getContentLength();
    method public String getContentType();
    method public String getEtag();
    method public String getExpires();
    method public void getHeaders(android.net.http.Headers.HeaderCallback);
    method public String getLastModified();
    method public String getLocation();
    method public String getPragma();
    method public String getProxyAuthenticate();
    method public String getRefresh();
    method public java.util.ArrayList<java.lang.String> getSetCookie();
    method public long getTransferEncoding();
    method public String getWwwAuthenticate();
    method public String getXPermittedCrossDomainPolicies();
    method public void parseHeader(org.apache.http.util.CharArrayBuffer);
    method public void setAcceptRanges(String);
    method public void setCacheControl(String);
    method public void setContentDisposition(String);
    method public void setContentEncoding(String);
    method public void setContentLength(long);
    method public void setContentType(String);
    method public void setEtag(String);
    method public void setExpires(String);
    method public void setLastModified(String);
    method public void setLocation(String);
    method public void setProxyAuthenticate(String);
    method public void setWwwAuthenticate(String);
    method public void setXPermittedCrossDomainPolicies(String);
    field public static final String ACCEPT_RANGES = "accept-ranges";
    field public static final String CACHE_CONTROL = "cache-control";
    field public static final int CONN_CLOSE = 1; // 0x1
    field public static final String CONN_DIRECTIVE = "connection";
    field public static final int CONN_KEEP_ALIVE = 2; // 0x2
    field public static final String CONTENT_DISPOSITION = "content-disposition";
    field public static final String CONTENT_ENCODING = "content-encoding";
    field public static final String CONTENT_LEN = "content-length";
    field public static final String CONTENT_TYPE = "content-type";
    field public static final String ETAG = "etag";
    field public static final String EXPIRES = "expires";
    field public static final String LAST_MODIFIED = "last-modified";
    field public static final String LOCATION = "location";
    field public static final int NO_CONN_TYPE = 0; // 0x0
    field public static final long NO_CONTENT_LENGTH = -1L; // 0xffffffffffffffffL
    field public static final long NO_TRANSFER_ENCODING = 0L; // 0x0L
    field public static final String PRAGMA = "pragma";
    field public static final String PROXY_AUTHENTICATE = "proxy-authenticate";
    field public static final String PROXY_CONNECTION = "proxy-connection";
    field public static final String REFRESH = "refresh";
    field public static final String SET_COOKIE = "set-cookie";
    field public static final String TRANSFER_ENCODING = "transfer-encoding";
    field public static final String WWW_AUTHENTICATE = "www-authenticate";
    field public static final String X_PERMITTED_CROSS_DOMAIN_POLICIES = "x-permitted-cross-domain-policies";
  }

  public static interface Headers.HeaderCallback {
    method public void header(String, String);
  }

  public class HttpAuthHeader {
    ctor public HttpAuthHeader(String);
    method public String getAlgorithm();
    method public String getNonce();
    method public String getOpaque();
    method public String getPassword();
    method public String getQop();
    method public String getRealm();
    method public int getScheme();
    method public boolean getStale();
    method public String getUsername();
    method public boolean isBasic();
    method public boolean isDigest();
    method public boolean isProxy();
    method public boolean isSupportedScheme();
    method public void setPassword(String);
    method public void setProxy();
    method public void setUsername(String);
    field public static final int BASIC = 1; // 0x1
    field public static final String BASIC_TOKEN = "Basic";
    field public static final int DIGEST = 2; // 0x2
    field public static final String DIGEST_TOKEN = "Digest";
    field public static final int UNKNOWN = 0; // 0x0
  }

  public class HttpsConnection extends android.net.http.Connection {
    method public static void initializeEngine(java.io.File);
  }

  public class LoggingEventHandler implements android.net.http.EventHandler {
    ctor public LoggingEventHandler();
    method public void certificate(android.net.http.SslCertificate);
    method public void data(byte[], int);
    method public void endData();
    method public void error(int, String);
    method public boolean handleSslErrorRequest(android.net.http.SslError);
    method public void headers(android.net.http.Headers);
    method public void locationChanged(String, boolean);
    method public void requestSent();
    method public void status(int, int, int, String);
  }

  public class Request {
  }

  public class RequestHandle {
    ctor public RequestHandle(android.net.http.RequestQueue, String, android.net.compatibility.WebAddress, String, java.util.Map<java.lang.String,java.lang.String>, java.io.InputStream, int, android.net.http.Request);
    ctor public RequestHandle(android.net.http.RequestQueue, String, android.net.compatibility.WebAddress, String, java.util.Map<java.lang.String,java.lang.String>, java.io.InputStream, int, android.net.http.Request, android.net.http.Connection);
    method public static String authorizationHeader(boolean);
    method public void cancel();
    method public static String computeBasicAuthResponse(String, String);
    method public String getMethod();
    method public int getRedirectCount();
    method public void handleSslErrorResponse(boolean);
    method public boolean isRedirectMax();
    method public void pauseRequest(boolean);
    method public void processRequest();
    method public void setRedirectCount(int);
    method public void setupBasicAuthResponse(boolean, String, String);
    method public void setupDigestAuthResponse(boolean, String, String, String, String, String, String, String);
    method public boolean setupRedirect(String, int, java.util.Map<java.lang.String,java.lang.String>);
    method public void waitUntilComplete();
    field public static final int MAX_REDIRECT_COUNT = 16; // 0x10
  }

  public class RequestQueue {
    ctor public RequestQueue(android.content.Context);
    ctor public RequestQueue(android.content.Context, int);
    method public void disablePlatformNotifications();
    method public void enablePlatformNotifications();
    method public org.apache.http.HttpHost getProxyHost();
    method public android.net.http.Request getRequest();
    method public android.net.http.Request getRequest(org.apache.http.HttpHost);
    method public boolean haveRequest(org.apache.http.HttpHost);
    method public android.net.http.RequestHandle queueRequest(String, String, java.util.Map<java.lang.String,java.lang.String>, android.net.http.EventHandler, java.io.InputStream, int);
    method public android.net.http.RequestHandle queueRequest(String, android.net.compatibility.WebAddress, String, java.util.Map<java.lang.String,java.lang.String>, android.net.http.EventHandler, java.io.InputStream, int);
    method protected void queueRequest(android.net.http.Request, boolean);
    method public android.net.http.RequestHandle queueSynchronousRequest(String, android.net.compatibility.WebAddress, String, java.util.Map<java.lang.String,java.lang.String>, android.net.http.EventHandler, java.io.InputStream, int);
    method public void requeueRequest(android.net.http.Request);
    method public void shutdown();
    method public void startTiming();
    method public void stopTiming();
  }

}

package com.android.internal.http.multipart {

  public class ByteArrayPartSource implements com.android.internal.http.multipart.PartSource {
    ctor public ByteArrayPartSource(String, byte[]);
    method public java.io.InputStream createInputStream();
    method public String getFileName();
    method public long getLength();
  }

  public class FilePart extends com.android.internal.http.multipart.PartBase {
    ctor public FilePart(String, com.android.internal.http.multipart.PartSource, String, String);
    ctor public FilePart(String, com.android.internal.http.multipart.PartSource);
    ctor public FilePart(String, java.io.File) throws java.io.FileNotFoundException;
    ctor public FilePart(String, java.io.File, String, String) throws java.io.FileNotFoundException;
    ctor public FilePart(String, String, java.io.File) throws java.io.FileNotFoundException;
    ctor public FilePart(String, String, java.io.File, String, String) throws java.io.FileNotFoundException;
    method protected com.android.internal.http.multipart.PartSource getSource();
    method protected long lengthOfData();
    method protected void sendData(java.io.OutputStream) throws java.io.IOException;
    field public static final String DEFAULT_CHARSET = "ISO-8859-1";
    field public static final String DEFAULT_CONTENT_TYPE = "application/octet-stream";
    field public static final String DEFAULT_TRANSFER_ENCODING = "binary";
    field protected static final String FILE_NAME = "; filename=";
  }

  public class FilePartSource implements com.android.internal.http.multipart.PartSource {
    ctor public FilePartSource(java.io.File) throws java.io.FileNotFoundException;
    ctor public FilePartSource(String, java.io.File) throws java.io.FileNotFoundException;
    method public java.io.InputStream createInputStream() throws java.io.IOException;
    method public String getFileName();
    method public long getLength();
  }

  public class MultipartEntity extends org.apache.http.entity.AbstractHttpEntity {
    ctor public MultipartEntity(com.android.internal.http.multipart.Part[], org.apache.http.params.HttpParams);
    ctor public MultipartEntity(com.android.internal.http.multipart.Part[]);
    method public java.io.InputStream getContent() throws java.io.IOException, java.lang.IllegalStateException;
    method public long getContentLength();
    method public org.apache.http.Header getContentType();
    method protected byte[] getMultipartBoundary();
    method public boolean isRepeatable();
    method public boolean isStreaming();
    method public void writeTo(java.io.OutputStream) throws java.io.IOException;
    field public static final String MULTIPART_BOUNDARY = "http.method.multipart.boundary";
    field protected com.android.internal.http.multipart.Part[] parts;
  }

  public abstract class Part {
    ctor public Part();
    method @Deprecated public static String getBoundary();
    method public abstract String getCharSet();
    method public abstract String getContentType();
    method public static long getLengthOfParts(com.android.internal.http.multipart.Part[]) throws java.io.IOException;
    method public static long getLengthOfParts(com.android.internal.http.multipart.Part[], byte[]) throws java.io.IOException;
    method public abstract String getName();
    method protected byte[] getPartBoundary();
    method public abstract String getTransferEncoding();
    method public boolean isRepeatable();
    method public long length() throws java.io.IOException;
    method protected abstract long lengthOfData() throws java.io.IOException;
    method public void send(java.io.OutputStream) throws java.io.IOException;
    method protected void sendContentTypeHeader(java.io.OutputStream) throws java.io.IOException;
    method protected abstract void sendData(java.io.OutputStream) throws java.io.IOException;
    method protected void sendDispositionHeader(java.io.OutputStream) throws java.io.IOException;
    method protected void sendEnd(java.io.OutputStream) throws java.io.IOException;
    method protected void sendEndOfHeader(java.io.OutputStream) throws java.io.IOException;
    method public static void sendParts(java.io.OutputStream, com.android.internal.http.multipart.Part[]) throws java.io.IOException;
    method public static void sendParts(java.io.OutputStream, com.android.internal.http.multipart.Part[], byte[]) throws java.io.IOException;
    method protected void sendStart(java.io.OutputStream) throws java.io.IOException;
    method protected void sendTransferEncodingHeader(java.io.OutputStream) throws java.io.IOException;
    field @Deprecated protected static final String BOUNDARY = "----------------314159265358979323846";
    field @Deprecated protected static final byte[] BOUNDARY_BYTES;
    field protected static final String CHARSET = "; charset=";
    field protected static final byte[] CHARSET_BYTES;
    field protected static final String CONTENT_DISPOSITION = "Content-Disposition: form-data; name=";
    field protected static final byte[] CONTENT_DISPOSITION_BYTES;
    field protected static final String CONTENT_TRANSFER_ENCODING = "Content-Transfer-Encoding: ";
    field protected static final byte[] CONTENT_TRANSFER_ENCODING_BYTES;
    field protected static final String CONTENT_TYPE = "Content-Type: ";
    field protected static final byte[] CONTENT_TYPE_BYTES;
    field protected static final String CRLF = "\r\n";
    field protected static final byte[] CRLF_BYTES;
    field protected static final String EXTRA = "--";
    field protected static final byte[] EXTRA_BYTES;
    field protected static final String QUOTE = "\"";
    field protected static final byte[] QUOTE_BYTES;
  }

  public abstract class PartBase extends com.android.internal.http.multipart.Part {
    ctor public PartBase(String, String, String, String);
    method public String getCharSet();
    method public String getContentType();
    method public String getName();
    method public String getTransferEncoding();
    method public void setCharSet(String);
    method public void setContentType(String);
    method public void setName(String);
    method public void setTransferEncoding(String);
  }

  public interface PartSource {
    method public java.io.InputStream createInputStream() throws java.io.IOException;
    method public String getFileName();
    method public long getLength();
  }

  public class StringPart extends com.android.internal.http.multipart.PartBase {
    ctor public StringPart(String, String, String);
    ctor public StringPart(String, String);
    method protected long lengthOfData();
    method protected void sendData(java.io.OutputStream) throws java.io.IOException;
    field public static final String DEFAULT_CHARSET = "US-ASCII";
    field public static final String DEFAULT_CONTENT_TYPE = "text/plain";
    field public static final String DEFAULT_TRANSFER_ENCODING = "8bit";
  }

}

package org.apache.commons.codec {

  @Deprecated public interface BinaryDecoder extends org.apache.commons.codec.Decoder {
    method @Deprecated public byte[] decode(byte[]) throws org.apache.commons.codec.DecoderException;
  }

  @Deprecated public interface BinaryEncoder extends org.apache.commons.codec.Encoder {
    method @Deprecated public byte[] encode(byte[]) throws org.apache.commons.codec.EncoderException;
  }

  @Deprecated public interface Decoder {
    method @Deprecated public Object decode(Object) throws org.apache.commons.codec.DecoderException;
  }

  @Deprecated public class DecoderException extends java.lang.Exception {
    ctor @Deprecated public DecoderException(String);
  }

  @Deprecated public interface Encoder {
    method @Deprecated public Object encode(Object) throws org.apache.commons.codec.EncoderException;
  }

  @Deprecated public class EncoderException extends java.lang.Exception {
    ctor @Deprecated public EncoderException(String);
  }

  @Deprecated public interface StringDecoder extends org.apache.commons.codec.Decoder {
    method @Deprecated public String decode(String) throws org.apache.commons.codec.DecoderException;
  }

  @Deprecated public interface StringEncoder extends org.apache.commons.codec.Encoder {
    method @Deprecated public String encode(String) throws org.apache.commons.codec.EncoderException;
  }

  @Deprecated public class StringEncoderComparator implements java.util.Comparator {
    ctor @Deprecated public StringEncoderComparator();
    ctor @Deprecated public StringEncoderComparator(org.apache.commons.codec.StringEncoder);
    method @Deprecated public int compare(Object, Object);
  }

}

package org.apache.commons.codec.binary {

  @Deprecated public class Base64 implements org.apache.commons.codec.BinaryDecoder org.apache.commons.codec.BinaryEncoder {
    ctor @Deprecated public Base64();
    method @Deprecated public Object decode(Object) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public byte[] decode(byte[]);
    method @Deprecated public static byte[] decodeBase64(byte[]);
    method @Deprecated public Object encode(Object) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public byte[] encode(byte[]);
    method @Deprecated public static byte[] encodeBase64(byte[]);
    method @Deprecated public static byte[] encodeBase64(byte[], boolean);
    method @Deprecated public static byte[] encodeBase64Chunked(byte[]);
    method @Deprecated public static boolean isArrayByteBase64(byte[]);
  }

  @Deprecated public class BinaryCodec implements org.apache.commons.codec.BinaryDecoder org.apache.commons.codec.BinaryEncoder {
    ctor @Deprecated public BinaryCodec();
    method @Deprecated public Object decode(Object) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public byte[] decode(byte[]);
    method @Deprecated public byte[] encode(byte[]);
    method @Deprecated public Object encode(Object) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public static byte[] fromAscii(char[]);
    method @Deprecated public static byte[] fromAscii(byte[]);
    method @Deprecated public static byte[] toAsciiBytes(byte[]);
    method @Deprecated public static char[] toAsciiChars(byte[]);
    method @Deprecated public static String toAsciiString(byte[]);
    method @Deprecated public byte[] toByteArray(String);
  }

  @Deprecated public class Hex implements org.apache.commons.codec.BinaryDecoder org.apache.commons.codec.BinaryEncoder {
    ctor @Deprecated public Hex();
    method @Deprecated public byte[] decode(byte[]) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public Object decode(Object) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public static byte[] decodeHex(char[]) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public byte[] encode(byte[]);
    method @Deprecated public Object encode(Object) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public static char[] encodeHex(byte[]);
    method @Deprecated protected static int toDigit(char, int) throws org.apache.commons.codec.DecoderException;
  }

}

package org.apache.commons.codec.language {

  @Deprecated public class DoubleMetaphone implements org.apache.commons.codec.StringEncoder {
    ctor @Deprecated public DoubleMetaphone();
    method @Deprecated protected char charAt(String, int);
    method @Deprecated protected static boolean contains(String, int, int, String[]);
    method @Deprecated public String doubleMetaphone(String);
    method @Deprecated public String doubleMetaphone(String, boolean);
    method @Deprecated public Object encode(Object) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public String encode(String);
    method @Deprecated public int getMaxCodeLen();
    method @Deprecated public boolean isDoubleMetaphoneEqual(String, String);
    method @Deprecated public boolean isDoubleMetaphoneEqual(String, String, boolean);
    method @Deprecated public void setMaxCodeLen(int);
    field @Deprecated protected int maxCodeLen;
  }

  @Deprecated public class DoubleMetaphone.DoubleMetaphoneResult {
    ctor @Deprecated public DoubleMetaphone.DoubleMetaphoneResult(int);
    method @Deprecated public void append(char);
    method @Deprecated public void append(char, char);
    method @Deprecated public void append(String);
    method @Deprecated public void append(String, String);
    method @Deprecated public void appendAlternate(char);
    method @Deprecated public void appendAlternate(String);
    method @Deprecated public void appendPrimary(char);
    method @Deprecated public void appendPrimary(String);
    method @Deprecated public String getAlternate();
    method @Deprecated public String getPrimary();
    method @Deprecated public boolean isComplete();
  }

  @Deprecated public class Metaphone implements org.apache.commons.codec.StringEncoder {
    ctor @Deprecated public Metaphone();
    method @Deprecated public Object encode(Object) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public String encode(String);
    method @Deprecated public int getMaxCodeLen();
    method @Deprecated public boolean isMetaphoneEqual(String, String);
    method @Deprecated public String metaphone(String);
    method @Deprecated public void setMaxCodeLen(int);
  }

  @Deprecated public class RefinedSoundex implements org.apache.commons.codec.StringEncoder {
    ctor @Deprecated public RefinedSoundex();
    ctor @Deprecated public RefinedSoundex(char[]);
    method @Deprecated public int difference(String, String) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public Object encode(Object) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public String encode(String);
    method @Deprecated public String soundex(String);
    field @Deprecated public static final org.apache.commons.codec.language.RefinedSoundex US_ENGLISH;
    field @Deprecated public static final char[] US_ENGLISH_MAPPING;
  }

  @Deprecated public class Soundex implements org.apache.commons.codec.StringEncoder {
    ctor @Deprecated public Soundex();
    ctor @Deprecated public Soundex(char[]);
    method @Deprecated public int difference(String, String) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public Object encode(Object) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public String encode(String);
    method @Deprecated public int getMaxLength();
    method @Deprecated public void setMaxLength(int);
    method @Deprecated public String soundex(String);
    field @Deprecated public static final org.apache.commons.codec.language.Soundex US_ENGLISH;
    field @Deprecated public static final char[] US_ENGLISH_MAPPING;
    field @Deprecated public static final String US_ENGLISH_MAPPING_STRING = "01230120022455012623010202";
  }

}

package org.apache.commons.codec.net {

  @Deprecated public class BCodec implements org.apache.commons.codec.StringDecoder org.apache.commons.codec.StringEncoder {
    ctor @Deprecated public BCodec();
    ctor @Deprecated public BCodec(String);
    method @Deprecated public String decode(String) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public Object decode(Object) throws org.apache.commons.codec.DecoderException;
    method @Deprecated protected byte[] doDecoding(byte[]) throws org.apache.commons.codec.DecoderException;
    method @Deprecated protected byte[] doEncoding(byte[]) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public String encode(String, String) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public String encode(String) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public Object encode(Object) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public String getDefaultCharset();
    method @Deprecated protected String getEncoding();
  }

  @Deprecated public class QCodec implements org.apache.commons.codec.StringDecoder org.apache.commons.codec.StringEncoder {
    ctor @Deprecated public QCodec();
    ctor @Deprecated public QCodec(String);
    method @Deprecated public String decode(String) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public Object decode(Object) throws org.apache.commons.codec.DecoderException;
    method @Deprecated protected byte[] doDecoding(byte[]) throws org.apache.commons.codec.DecoderException;
    method @Deprecated protected byte[] doEncoding(byte[]) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public String encode(String, String) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public String encode(String) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public Object encode(Object) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public String getDefaultCharset();
    method @Deprecated protected String getEncoding();
    method @Deprecated public boolean isEncodeBlanks();
    method @Deprecated public void setEncodeBlanks(boolean);
  }

  @Deprecated public class QuotedPrintableCodec implements org.apache.commons.codec.BinaryDecoder org.apache.commons.codec.BinaryEncoder org.apache.commons.codec.StringDecoder org.apache.commons.codec.StringEncoder {
    ctor @Deprecated public QuotedPrintableCodec();
    ctor @Deprecated public QuotedPrintableCodec(String);
    method @Deprecated public byte[] decode(byte[]) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public String decode(String, String) throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException;
    method @Deprecated public String decode(String) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public Object decode(Object) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public static final byte[] decodeQuotedPrintable(byte[]) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public byte[] encode(byte[]);
    method @Deprecated public String encode(String) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public Object encode(Object) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public String encode(String, String) throws java.io.UnsupportedEncodingException;
    method @Deprecated public static final byte[] encodeQuotedPrintable(java.util.BitSet, byte[]);
    method @Deprecated public String getDefaultCharset();
  }

  @Deprecated public class URLCodec implements org.apache.commons.codec.BinaryDecoder org.apache.commons.codec.BinaryEncoder org.apache.commons.codec.StringDecoder org.apache.commons.codec.StringEncoder {
    ctor @Deprecated public URLCodec();
    ctor @Deprecated public URLCodec(String);
    method @Deprecated public byte[] decode(byte[]) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public String decode(String, String) throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException;
    method @Deprecated public String decode(String) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public Object decode(Object) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public static final byte[] decodeUrl(byte[]) throws org.apache.commons.codec.DecoderException;
    method @Deprecated public byte[] encode(byte[]);
    method @Deprecated public String encode(String, String) throws java.io.UnsupportedEncodingException;
    method @Deprecated public String encode(String) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public Object encode(Object) throws org.apache.commons.codec.EncoderException;
    method @Deprecated public static final byte[] encodeUrl(java.util.BitSet, byte[]);
    method @Deprecated public String getDefaultCharset();
    method @Deprecated public String getEncoding();
    field @Deprecated protected static byte ESCAPE_CHAR;
    field @Deprecated protected static final java.util.BitSet WWW_FORM_URL;
    field @Deprecated protected String charset;
  }

}

package org.apache.commons.logging {

  @Deprecated public interface Log {
    method @Deprecated public void debug(Object);
    method @Deprecated public void debug(Object, Throwable);
    method @Deprecated public void error(Object);
    method @Deprecated public void error(Object, Throwable);
    method @Deprecated public void fatal(Object);
    method @Deprecated public void fatal(Object, Throwable);
    method @Deprecated public void info(Object);
    method @Deprecated public void info(Object, Throwable);
    method @Deprecated public boolean isDebugEnabled();
    method @Deprecated public boolean isErrorEnabled();
    method @Deprecated public boolean isFatalEnabled();
    method @Deprecated public boolean isInfoEnabled();
    method @Deprecated public boolean isTraceEnabled();
    method @Deprecated public boolean isWarnEnabled();
    method @Deprecated public void trace(Object);
    method @Deprecated public void trace(Object, Throwable);
    method @Deprecated public void warn(Object);
    method @Deprecated public void warn(Object, Throwable);
  }

  @Deprecated public class LogConfigurationException extends java.lang.RuntimeException {
    ctor @Deprecated public LogConfigurationException();
    ctor @Deprecated public LogConfigurationException(String);
    ctor @Deprecated public LogConfigurationException(Throwable);
    ctor @Deprecated public LogConfigurationException(String, Throwable);
    field @Deprecated protected Throwable cause;
  }

  @Deprecated public abstract class LogFactory {
    ctor @Deprecated protected LogFactory();
    method @Deprecated protected static Object createFactory(String, ClassLoader);
    method @Deprecated protected static ClassLoader directGetContextClassLoader() throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated public abstract Object getAttribute(String);
    method @Deprecated public abstract String[] getAttributeNames();
    method @Deprecated protected static ClassLoader getClassLoader(Class);
    method @Deprecated protected static ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated public static org.apache.commons.logging.LogFactory getFactory() throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated public abstract org.apache.commons.logging.Log getInstance(Class) throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated public abstract org.apache.commons.logging.Log getInstance(String) throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated public static org.apache.commons.logging.Log getLog(Class) throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated public static org.apache.commons.logging.Log getLog(String) throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated protected static boolean isDiagnosticsEnabled();
    method @Deprecated protected static final void logRawDiagnostic(String);
    method @Deprecated protected static org.apache.commons.logging.LogFactory newFactory(String, ClassLoader, ClassLoader) throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated protected static org.apache.commons.logging.LogFactory newFactory(String, ClassLoader);
    method @Deprecated public static String objectId(Object);
    method @Deprecated public abstract void release();
    method @Deprecated public static void release(ClassLoader);
    method @Deprecated public static void releaseAll();
    method @Deprecated public abstract void removeAttribute(String);
    method @Deprecated public abstract void setAttribute(String, Object);
    field @Deprecated public static final String DIAGNOSTICS_DEST_PROPERTY = "org.apache.commons.logging.diagnostics.dest";
    field @Deprecated public static final String FACTORY_DEFAULT = "org.apache.commons.logging.impl.LogFactoryImpl";
    field @Deprecated public static final String FACTORY_PROPERTIES = "commons-logging.properties";
    field @Deprecated public static final String FACTORY_PROPERTY = "org.apache.commons.logging.LogFactory";
    field @Deprecated public static final String HASHTABLE_IMPLEMENTATION_PROPERTY = "org.apache.commons.logging.LogFactory.HashtableImpl";
    field @Deprecated public static final String PRIORITY_KEY = "priority";
    field @Deprecated protected static final String SERVICE_ID = "META-INF/services/org.apache.commons.logging.LogFactory";
    field @Deprecated public static final String TCCL_KEY = "use_tccl";
    field @Deprecated protected static java.util.Hashtable factories;
    field @Deprecated protected static org.apache.commons.logging.LogFactory nullClassLoaderFactory;
  }

  @Deprecated public class LogSource {
    method @Deprecated public static org.apache.commons.logging.Log getInstance(String);
    method @Deprecated public static org.apache.commons.logging.Log getInstance(Class);
    method @Deprecated public static String[] getLogNames();
    method @Deprecated public static org.apache.commons.logging.Log makeNewLogInstance(String);
    method @Deprecated public static void setLogImplementation(String) throws java.lang.ClassNotFoundException, java.lang.ExceptionInInitializerError, java.lang.LinkageError, java.lang.NoSuchMethodException, java.lang.SecurityException;
    method @Deprecated public static void setLogImplementation(Class) throws java.lang.ExceptionInInitializerError, java.lang.LinkageError, java.lang.NoSuchMethodException, java.lang.SecurityException;
    field @Deprecated protected static boolean jdk14IsAvailable;
    field @Deprecated protected static boolean log4jIsAvailable;
    field @Deprecated protected static java.lang.reflect.Constructor logImplctor;
    field @Deprecated protected static java.util.Hashtable logs;
  }

}

package org.apache.commons.logging.impl {

  @Deprecated public class Jdk14Logger implements org.apache.commons.logging.Log java.io.Serializable {
    ctor @Deprecated public Jdk14Logger(String);
    method @Deprecated public void debug(Object);
    method @Deprecated public void debug(Object, Throwable);
    method @Deprecated public void error(Object);
    method @Deprecated public void error(Object, Throwable);
    method @Deprecated public void fatal(Object);
    method @Deprecated public void fatal(Object, Throwable);
    method @Deprecated public java.util.logging.Logger getLogger();
    method @Deprecated public void info(Object);
    method @Deprecated public void info(Object, Throwable);
    method @Deprecated public boolean isDebugEnabled();
    method @Deprecated public boolean isErrorEnabled();
    method @Deprecated public boolean isFatalEnabled();
    method @Deprecated public boolean isInfoEnabled();
    method @Deprecated public boolean isTraceEnabled();
    method @Deprecated public boolean isWarnEnabled();
    method @Deprecated public void trace(Object);
    method @Deprecated public void trace(Object, Throwable);
    method @Deprecated public void warn(Object);
    method @Deprecated public void warn(Object, Throwable);
    field @Deprecated protected static final java.util.logging.Level dummyLevel;
    field @Deprecated protected transient java.util.logging.Logger logger;
    field @Deprecated protected String name;
  }

  @Deprecated public class LogFactoryImpl extends org.apache.commons.logging.LogFactory {
    ctor @Deprecated public LogFactoryImpl();
    method @Deprecated public Object getAttribute(String);
    method @Deprecated public String[] getAttributeNames();
    method @Deprecated protected static ClassLoader getClassLoader(Class);
    method @Deprecated protected static ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated public org.apache.commons.logging.Log getInstance(Class) throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated public org.apache.commons.logging.Log getInstance(String) throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated protected String getLogClassName();
    method @Deprecated protected java.lang.reflect.Constructor getLogConstructor() throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated protected static boolean isDiagnosticsEnabled();
    method @Deprecated protected boolean isJdk13LumberjackAvailable();
    method @Deprecated protected boolean isJdk14Available();
    method @Deprecated protected boolean isLog4JAvailable();
    method @Deprecated protected void logDiagnostic(String);
    method @Deprecated protected org.apache.commons.logging.Log newInstance(String) throws org.apache.commons.logging.LogConfigurationException;
    method @Deprecated public void release();
    method @Deprecated public void removeAttribute(String);
    method @Deprecated public void setAttribute(String, Object);
    field @Deprecated public static final String ALLOW_FLAWED_CONTEXT_PROPERTY = "org.apache.commons.logging.Log.allowFlawedContext";
    field @Deprecated public static final String ALLOW_FLAWED_DISCOVERY_PROPERTY = "org.apache.commons.logging.Log.allowFlawedDiscovery";
    field @Deprecated public static final String ALLOW_FLAWED_HIERARCHY_PROPERTY = "org.apache.commons.logging.Log.allowFlawedHierarchy";
    field @Deprecated public static final String LOG_PROPERTY = "org.apache.commons.logging.Log";
    field @Deprecated protected static final String LOG_PROPERTY_OLD = "org.apache.commons.logging.log";
    field @Deprecated protected java.util.Hashtable attributes;
    field @Deprecated protected java.util.Hashtable instances;
    field @Deprecated protected java.lang.reflect.Constructor logConstructor;
    field @Deprecated protected Class[] logConstructorSignature;
    field @Deprecated protected java.lang.reflect.Method logMethod;
    field @Deprecated protected Class[] logMethodSignature;
  }

  @Deprecated public class NoOpLog implements org.apache.commons.logging.Log java.io.Serializable {
    ctor @Deprecated public NoOpLog();
    ctor @Deprecated public NoOpLog(String);
    method @Deprecated public void debug(Object);
    method @Deprecated public void debug(Object, Throwable);
    method @Deprecated public void error(Object);
    method @Deprecated public void error(Object, Throwable);
    method @Deprecated public void fatal(Object);
    method @Deprecated public void fatal(Object, Throwable);
    method @Deprecated public void info(Object);
    method @Deprecated public void info(Object, Throwable);
    method @Deprecated public final boolean isDebugEnabled();
    method @Deprecated public final boolean isErrorEnabled();
    method @Deprecated public final boolean isFatalEnabled();
    method @Deprecated public final boolean isInfoEnabled();
    method @Deprecated public final boolean isTraceEnabled();
    method @Deprecated public final boolean isWarnEnabled();
    method @Deprecated public void trace(Object);
    method @Deprecated public void trace(Object, Throwable);
    method @Deprecated public void warn(Object);
    method @Deprecated public void warn(Object, Throwable);
  }

  @Deprecated public class SimpleLog implements org.apache.commons.logging.Log java.io.Serializable {
    ctor @Deprecated public SimpleLog(String);
    method @Deprecated public final void debug(Object);
    method @Deprecated public final void debug(Object, Throwable);
    method @Deprecated public final void error(Object);
    method @Deprecated public final void error(Object, Throwable);
    method @Deprecated public final void fatal(Object);
    method @Deprecated public final void fatal(Object, Throwable);
    method @Deprecated public int getLevel();
    method @Deprecated public final void info(Object);
    method @Deprecated public final void info(Object, Throwable);
    method @Deprecated public final boolean isDebugEnabled();
    method @Deprecated public final boolean isErrorEnabled();
    method @Deprecated public final boolean isFatalEnabled();
    method @Deprecated public final boolean isInfoEnabled();
    method @Deprecated protected boolean isLevelEnabled(int);
    method @Deprecated public final boolean isTraceEnabled();
    method @Deprecated public final boolean isWarnEnabled();
    method @Deprecated protected void log(int, Object, Throwable);
    method @Deprecated public void setLevel(int);
    method @Deprecated public final void trace(Object);
    method @Deprecated public final void trace(Object, Throwable);
    method @Deprecated public final void warn(Object);
    method @Deprecated public final void warn(Object, Throwable);
    method @Deprecated protected void write(StringBuffer);
    field @Deprecated protected static final String DEFAULT_DATE_TIME_FORMAT = "yyyy/MM/dd HH:mm:ss:SSS zzz";
    field @Deprecated public static final int LOG_LEVEL_ALL = 0; // 0x0
    field @Deprecated public static final int LOG_LEVEL_DEBUG = 2; // 0x2
    field @Deprecated public static final int LOG_LEVEL_ERROR = 5; // 0x5
    field @Deprecated public static final int LOG_LEVEL_FATAL = 6; // 0x6
    field @Deprecated public static final int LOG_LEVEL_INFO = 3; // 0x3
    field @Deprecated public static final int LOG_LEVEL_OFF = 7; // 0x7
    field @Deprecated public static final int LOG_LEVEL_TRACE = 1; // 0x1
    field @Deprecated public static final int LOG_LEVEL_WARN = 4; // 0x4
    field @Deprecated protected int currentLogLevel;
    field @Deprecated protected static java.text.DateFormat dateFormatter;
    field @Deprecated protected static String dateTimeFormat;
    field @Deprecated protected String logName;
    field @Deprecated protected static boolean showDateTime;
    field @Deprecated protected static boolean showLogName;
    field @Deprecated protected static boolean showShortName;
    field @Deprecated protected static final java.util.Properties simpleLogProps;
    field @Deprecated protected static final String systemPrefix = "org.apache.commons.logging.simplelog.";
  }

  @Deprecated public final class WeakHashtable extends java.util.Hashtable {
    ctor @Deprecated public WeakHashtable();
    method @Deprecated public java.util.Enumeration elements();
    method @Deprecated public java.util.Set entrySet();
    method @Deprecated public Object get(Object);
    method @Deprecated public java.util.Set keySet();
    method @Deprecated public java.util.Enumeration keys();
    method @Deprecated public Object put(Object, Object);
    method @Deprecated public void putAll(java.util.Map);
    method @Deprecated public Object remove(Object);
    method @Deprecated public java.util.Collection values();
  }

}

package org.apache.http {

  @Deprecated public class ConnectionClosedException extends java.io.IOException {
    ctor @Deprecated public ConnectionClosedException(String);
  }

  @Deprecated public interface ConnectionReuseStrategy {
    method @Deprecated public boolean keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  @Deprecated public interface FormattedHeader extends org.apache.http.Header {
    method @Deprecated public org.apache.http.util.CharArrayBuffer getBuffer();
    method @Deprecated public int getValuePos();
  }

  @Deprecated public interface Header {
    method @Deprecated public org.apache.http.HeaderElement[] getElements() throws org.apache.http.ParseException;
    method @Deprecated public String getName();
    method @Deprecated public String getValue();
  }

  @Deprecated public interface HeaderElement {
    method @Deprecated public String getName();
    method @Deprecated public org.apache.http.NameValuePair getParameter(int);
    method @Deprecated public org.apache.http.NameValuePair getParameterByName(String);
    method @Deprecated public int getParameterCount();
    method @Deprecated public org.apache.http.NameValuePair[] getParameters();
    method @Deprecated public String getValue();
  }

  @Deprecated public interface HeaderElementIterator extends java.util.Iterator {
    method @Deprecated public org.apache.http.HeaderElement nextElement();
  }

  @Deprecated public interface HeaderIterator extends java.util.Iterator {
    method @Deprecated public org.apache.http.Header nextHeader();
  }

  @Deprecated public interface HttpClientConnection extends org.apache.http.HttpConnection {
    method @Deprecated public void flush() throws java.io.IOException;
    method @Deprecated public boolean isResponseAvailable(int) throws java.io.IOException;
    method @Deprecated public void receiveResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public org.apache.http.HttpResponse receiveResponseHeader() throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void sendRequestHeader(org.apache.http.HttpRequest) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public interface HttpConnection {
    method @Deprecated public void close() throws java.io.IOException;
    method @Deprecated public org.apache.http.HttpConnectionMetrics getMetrics();
    method @Deprecated public int getSocketTimeout();
    method @Deprecated public boolean isOpen();
    method @Deprecated public boolean isStale();
    method @Deprecated public void setSocketTimeout(int);
    method @Deprecated public void shutdown() throws java.io.IOException;
  }

  @Deprecated public interface HttpConnectionMetrics {
    method @Deprecated public Object getMetric(String);
    method @Deprecated public long getReceivedBytesCount();
    method @Deprecated public long getRequestCount();
    method @Deprecated public long getResponseCount();
    method @Deprecated public long getSentBytesCount();
    method @Deprecated public void reset();
  }

  @Deprecated public interface HttpEntity {
    method @Deprecated public void consumeContent() throws java.io.IOException;
    method @Deprecated public java.io.InputStream getContent() throws java.io.IOException, java.lang.IllegalStateException;
    method @Deprecated public org.apache.http.Header getContentEncoding();
    method @Deprecated public long getContentLength();
    method @Deprecated public org.apache.http.Header getContentType();
    method @Deprecated public boolean isChunked();
    method @Deprecated public boolean isRepeatable();
    method @Deprecated public boolean isStreaming();
    method @Deprecated public void writeTo(java.io.OutputStream) throws java.io.IOException;
  }

  @Deprecated public interface HttpEntityEnclosingRequest extends org.apache.http.HttpRequest {
    method @Deprecated public boolean expectContinue();
    method @Deprecated public org.apache.http.HttpEntity getEntity();
    method @Deprecated public void setEntity(org.apache.http.HttpEntity);
  }

  @Deprecated public class HttpException extends java.lang.Exception {
    ctor @Deprecated public HttpException();
    ctor @Deprecated public HttpException(String);
    ctor @Deprecated public HttpException(String, Throwable);
  }

  @Deprecated public final class HttpHost implements java.lang.Cloneable {
    ctor @Deprecated public HttpHost(String, int, String);
    ctor @Deprecated public HttpHost(String, int);
    ctor @Deprecated public HttpHost(String);
    ctor @Deprecated public HttpHost(org.apache.http.HttpHost);
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public String getHostName();
    method @Deprecated public int getPort();
    method @Deprecated public String getSchemeName();
    method @Deprecated public String toHostString();
    method @Deprecated public String toURI();
    field @Deprecated public static final String DEFAULT_SCHEME_NAME = "http";
    field @Deprecated protected final String hostname;
    field @Deprecated protected final String lcHostname;
    field @Deprecated protected final int port;
    field @Deprecated protected final String schemeName;
  }

  @Deprecated public interface HttpInetConnection extends org.apache.http.HttpConnection {
    method @Deprecated public java.net.InetAddress getLocalAddress();
    method @Deprecated public int getLocalPort();
    method @Deprecated public java.net.InetAddress getRemoteAddress();
    method @Deprecated public int getRemotePort();
  }

  @Deprecated public interface HttpMessage {
    method @Deprecated public void addHeader(org.apache.http.Header);
    method @Deprecated public void addHeader(String, String);
    method @Deprecated public boolean containsHeader(String);
    method @Deprecated public org.apache.http.Header[] getAllHeaders();
    method @Deprecated public org.apache.http.Header getFirstHeader(String);
    method @Deprecated public org.apache.http.Header[] getHeaders(String);
    method @Deprecated public org.apache.http.Header getLastHeader(String);
    method @Deprecated public org.apache.http.params.HttpParams getParams();
    method @Deprecated public org.apache.http.ProtocolVersion getProtocolVersion();
    method @Deprecated public org.apache.http.HeaderIterator headerIterator();
    method @Deprecated public org.apache.http.HeaderIterator headerIterator(String);
    method @Deprecated public void removeHeader(org.apache.http.Header);
    method @Deprecated public void removeHeaders(String);
    method @Deprecated public void setHeader(org.apache.http.Header);
    method @Deprecated public void setHeader(String, String);
    method @Deprecated public void setHeaders(org.apache.http.Header[]);
    method @Deprecated public void setParams(org.apache.http.params.HttpParams);
  }

  @Deprecated public interface HttpRequest extends org.apache.http.HttpMessage {
    method @Deprecated public org.apache.http.RequestLine getRequestLine();
  }

  @Deprecated public interface HttpRequestFactory {
    method @Deprecated public org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine) throws org.apache.http.MethodNotSupportedException;
    method @Deprecated public org.apache.http.HttpRequest newHttpRequest(String, String) throws org.apache.http.MethodNotSupportedException;
  }

  @Deprecated public interface HttpRequestInterceptor {
    method @Deprecated public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public interface HttpResponse extends org.apache.http.HttpMessage {
    method @Deprecated public org.apache.http.HttpEntity getEntity();
    method @Deprecated public java.util.Locale getLocale();
    method @Deprecated public org.apache.http.StatusLine getStatusLine();
    method @Deprecated public void setEntity(org.apache.http.HttpEntity);
    method @Deprecated public void setLocale(java.util.Locale);
    method @Deprecated public void setReasonPhrase(String) throws java.lang.IllegalStateException;
    method @Deprecated public void setStatusCode(int) throws java.lang.IllegalStateException;
    method @Deprecated public void setStatusLine(org.apache.http.StatusLine);
    method @Deprecated public void setStatusLine(org.apache.http.ProtocolVersion, int);
    method @Deprecated public void setStatusLine(org.apache.http.ProtocolVersion, int, String);
  }

  @Deprecated public interface HttpResponseFactory {
    method @Deprecated public org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion, int, org.apache.http.protocol.HttpContext);
    method @Deprecated public org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine, org.apache.http.protocol.HttpContext);
  }

  @Deprecated public interface HttpResponseInterceptor {
    method @Deprecated public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public interface HttpServerConnection extends org.apache.http.HttpConnection {
    method @Deprecated public void flush() throws java.io.IOException;
    method @Deprecated public void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public org.apache.http.HttpRequest receiveRequestHeader() throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void sendResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void sendResponseHeader(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public interface HttpStatus {
    field @Deprecated public static final int SC_ACCEPTED = 202; // 0xca
    field @Deprecated public static final int SC_BAD_GATEWAY = 502; // 0x1f6
    field @Deprecated public static final int SC_BAD_REQUEST = 400; // 0x190
    field @Deprecated public static final int SC_CONFLICT = 409; // 0x199
    field @Deprecated public static final int SC_CONTINUE = 100; // 0x64
    field @Deprecated public static final int SC_CREATED = 201; // 0xc9
    field @Deprecated public static final int SC_EXPECTATION_FAILED = 417; // 0x1a1
    field @Deprecated public static final int SC_FAILED_DEPENDENCY = 424; // 0x1a8
    field @Deprecated public static final int SC_FORBIDDEN = 403; // 0x193
    field @Deprecated public static final int SC_GATEWAY_TIMEOUT = 504; // 0x1f8
    field @Deprecated public static final int SC_GONE = 410; // 0x19a
    field @Deprecated public static final int SC_HTTP_VERSION_NOT_SUPPORTED = 505; // 0x1f9
    field @Deprecated public static final int SC_INSUFFICIENT_SPACE_ON_RESOURCE = 419; // 0x1a3
    field @Deprecated public static final int SC_INSUFFICIENT_STORAGE = 507; // 0x1fb
    field @Deprecated public static final int SC_INTERNAL_SERVER_ERROR = 500; // 0x1f4
    field @Deprecated public static final int SC_LENGTH_REQUIRED = 411; // 0x19b
    field @Deprecated public static final int SC_LOCKED = 423; // 0x1a7
    field @Deprecated public static final int SC_METHOD_FAILURE = 420; // 0x1a4
    field @Deprecated public static final int SC_METHOD_NOT_ALLOWED = 405; // 0x195
    field @Deprecated public static final int SC_MOVED_PERMANENTLY = 301; // 0x12d
    field @Deprecated public static final int SC_MOVED_TEMPORARILY = 302; // 0x12e
    field @Deprecated public static final int SC_MULTIPLE_CHOICES = 300; // 0x12c
    field @Deprecated public static final int SC_MULTI_STATUS = 207; // 0xcf
    field @Deprecated public static final int SC_NON_AUTHORITATIVE_INFORMATION = 203; // 0xcb
    field @Deprecated public static final int SC_NOT_ACCEPTABLE = 406; // 0x196
    field @Deprecated public static final int SC_NOT_FOUND = 404; // 0x194
    field @Deprecated public static final int SC_NOT_IMPLEMENTED = 501; // 0x1f5
    field @Deprecated public static final int SC_NOT_MODIFIED = 304; // 0x130
    field @Deprecated public static final int SC_NO_CONTENT = 204; // 0xcc
    field @Deprecated public static final int SC_OK = 200; // 0xc8
    field @Deprecated public static final int SC_PARTIAL_CONTENT = 206; // 0xce
    field @Deprecated public static final int SC_PAYMENT_REQUIRED = 402; // 0x192
    field @Deprecated public static final int SC_PRECONDITION_FAILED = 412; // 0x19c
    field @Deprecated public static final int SC_PROCESSING = 102; // 0x66
    field @Deprecated public static final int SC_PROXY_AUTHENTICATION_REQUIRED = 407; // 0x197
    field @Deprecated public static final int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416; // 0x1a0
    field @Deprecated public static final int SC_REQUEST_TIMEOUT = 408; // 0x198
    field @Deprecated public static final int SC_REQUEST_TOO_LONG = 413; // 0x19d
    field @Deprecated public static final int SC_REQUEST_URI_TOO_LONG = 414; // 0x19e
    field @Deprecated public static final int SC_RESET_CONTENT = 205; // 0xcd
    field @Deprecated public static final int SC_SEE_OTHER = 303; // 0x12f
    field @Deprecated public static final int SC_SERVICE_UNAVAILABLE = 503; // 0x1f7
    field @Deprecated public static final int SC_SWITCHING_PROTOCOLS = 101; // 0x65
    field @Deprecated public static final int SC_TEMPORARY_REDIRECT = 307; // 0x133
    field @Deprecated public static final int SC_UNAUTHORIZED = 401; // 0x191
    field @Deprecated public static final int SC_UNPROCESSABLE_ENTITY = 422; // 0x1a6
    field @Deprecated public static final int SC_UNSUPPORTED_MEDIA_TYPE = 415; // 0x19f
    field @Deprecated public static final int SC_USE_PROXY = 305; // 0x131
  }

  @Deprecated public final class HttpVersion extends org.apache.http.ProtocolVersion implements java.io.Serializable {
    ctor @Deprecated public HttpVersion(int, int);
    field @Deprecated public static final String HTTP = "HTTP";
    field @Deprecated public static final org.apache.http.HttpVersion HTTP_0_9;
    field @Deprecated public static final org.apache.http.HttpVersion HTTP_1_0;
    field @Deprecated public static final org.apache.http.HttpVersion HTTP_1_1;
  }

  @Deprecated public class MalformedChunkCodingException extends java.io.IOException {
    ctor @Deprecated public MalformedChunkCodingException();
    ctor @Deprecated public MalformedChunkCodingException(String);
  }

  @Deprecated public class MethodNotSupportedException extends org.apache.http.HttpException {
    ctor @Deprecated public MethodNotSupportedException(String);
    ctor @Deprecated public MethodNotSupportedException(String, Throwable);
  }

  @Deprecated public interface NameValuePair {
    method @Deprecated public String getName();
    method @Deprecated public String getValue();
  }

  @Deprecated public class NoHttpResponseException extends java.io.IOException {
    ctor @Deprecated public NoHttpResponseException(String);
  }

  @Deprecated public class ParseException extends java.lang.RuntimeException {
    ctor @Deprecated public ParseException();
    ctor @Deprecated public ParseException(String);
  }

  @Deprecated public class ProtocolException extends org.apache.http.HttpException {
    ctor @Deprecated public ProtocolException();
    ctor @Deprecated public ProtocolException(String);
    ctor @Deprecated public ProtocolException(String, Throwable);
  }

  @Deprecated public class ProtocolVersion implements java.lang.Cloneable java.io.Serializable {
    ctor @Deprecated public ProtocolVersion(String, int, int);
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public int compareToVersion(org.apache.http.ProtocolVersion);
    method @Deprecated public final boolean equals(Object);
    method @Deprecated public org.apache.http.ProtocolVersion forVersion(int, int);
    method @Deprecated public final int getMajor();
    method @Deprecated public final int getMinor();
    method @Deprecated public final String getProtocol();
    method @Deprecated public final boolean greaterEquals(org.apache.http.ProtocolVersion);
    method @Deprecated public final int hashCode();
    method @Deprecated public boolean isComparable(org.apache.http.ProtocolVersion);
    method @Deprecated public final boolean lessEquals(org.apache.http.ProtocolVersion);
    field @Deprecated protected final int major;
    field @Deprecated protected final int minor;
    field @Deprecated protected final String protocol;
  }

  @Deprecated public interface ReasonPhraseCatalog {
    method @Deprecated public String getReason(int, java.util.Locale);
  }

  @Deprecated public interface RequestLine {
    method @Deprecated public String getMethod();
    method @Deprecated public org.apache.http.ProtocolVersion getProtocolVersion();
    method @Deprecated public String getUri();
  }

  @Deprecated public interface StatusLine {
    method @Deprecated public org.apache.http.ProtocolVersion getProtocolVersion();
    method @Deprecated public String getReasonPhrase();
    method @Deprecated public int getStatusCode();
  }

  @Deprecated public interface TokenIterator extends java.util.Iterator {
    method @Deprecated public String nextToken();
  }

  @Deprecated public class UnsupportedHttpVersionException extends org.apache.http.ProtocolException {
    ctor @Deprecated public UnsupportedHttpVersionException();
    ctor @Deprecated public UnsupportedHttpVersionException(String);
  }

}

package org.apache.http.auth {

  @Deprecated public final class AUTH {
    field @Deprecated public static final String PROXY_AUTH = "Proxy-Authenticate";
    field @Deprecated public static final String PROXY_AUTH_RESP = "Proxy-Authorization";
    field @Deprecated public static final String WWW_AUTH = "WWW-Authenticate";
    field @Deprecated public static final String WWW_AUTH_RESP = "Authorization";
  }

  @Deprecated public interface AuthScheme {
    method @Deprecated public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) throws org.apache.http.auth.AuthenticationException;
    method @Deprecated public String getParameter(String);
    method @Deprecated public String getRealm();
    method @Deprecated public String getSchemeName();
    method @Deprecated public boolean isComplete();
    method @Deprecated public boolean isConnectionBased();
    method @Deprecated public void processChallenge(org.apache.http.Header) throws org.apache.http.auth.MalformedChallengeException;
  }

  @Deprecated public interface AuthSchemeFactory {
    method @Deprecated public org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams);
  }

  @Deprecated public final class AuthSchemeRegistry {
    ctor @Deprecated public AuthSchemeRegistry();
    method @Deprecated public org.apache.http.auth.AuthScheme getAuthScheme(String, org.apache.http.params.HttpParams) throws java.lang.IllegalStateException;
    method @Deprecated public java.util.List<java.lang.String> getSchemeNames();
    method @Deprecated public void register(String, org.apache.http.auth.AuthSchemeFactory);
    method @Deprecated public void setItems(java.util.Map<java.lang.String,org.apache.http.auth.AuthSchemeFactory>);
    method @Deprecated public void unregister(String);
  }

  @Deprecated public class AuthScope {
    ctor @Deprecated public AuthScope(String, int, String, String);
    ctor @Deprecated public AuthScope(String, int, String);
    ctor @Deprecated public AuthScope(String, int);
    ctor @Deprecated public AuthScope(org.apache.http.auth.AuthScope);
    method @Deprecated public String getHost();
    method @Deprecated public int getPort();
    method @Deprecated public String getRealm();
    method @Deprecated public String getScheme();
    method @Deprecated public int match(org.apache.http.auth.AuthScope);
    field @Deprecated public static final org.apache.http.auth.AuthScope ANY;
    field @Deprecated public static final String ANY_HOST;
    field @Deprecated public static final int ANY_PORT = -1; // 0xffffffff
    field @Deprecated public static final String ANY_REALM;
    field @Deprecated public static final String ANY_SCHEME;
  }

  @Deprecated public class AuthState {
    ctor @Deprecated public AuthState();
    method @Deprecated public org.apache.http.auth.AuthScheme getAuthScheme();
    method @Deprecated public org.apache.http.auth.AuthScope getAuthScope();
    method @Deprecated public org.apache.http.auth.Credentials getCredentials();
    method @Deprecated public void invalidate();
    method @Deprecated public boolean isValid();
    method @Deprecated public void setAuthScheme(org.apache.http.auth.AuthScheme);
    method @Deprecated public void setAuthScope(org.apache.http.auth.AuthScope);
    method @Deprecated public void setCredentials(org.apache.http.auth.Credentials);
  }

  @Deprecated public class AuthenticationException extends org.apache.http.ProtocolException {
    ctor @Deprecated public AuthenticationException();
    ctor @Deprecated public AuthenticationException(String);
    ctor @Deprecated public AuthenticationException(String, Throwable);
  }

  @Deprecated public final class BasicUserPrincipal implements java.security.Principal {
    ctor @Deprecated public BasicUserPrincipal(String);
    method @Deprecated public String getName();
  }

  @Deprecated public interface Credentials {
    method @Deprecated public String getPassword();
    method @Deprecated public java.security.Principal getUserPrincipal();
  }

  @Deprecated public class InvalidCredentialsException extends org.apache.http.auth.AuthenticationException {
    ctor @Deprecated public InvalidCredentialsException();
    ctor @Deprecated public InvalidCredentialsException(String);
    ctor @Deprecated public InvalidCredentialsException(String, Throwable);
  }

  @Deprecated public class MalformedChallengeException extends org.apache.http.ProtocolException {
    ctor @Deprecated public MalformedChallengeException();
    ctor @Deprecated public MalformedChallengeException(String);
    ctor @Deprecated public MalformedChallengeException(String, Throwable);
  }

  @Deprecated public class NTCredentials implements org.apache.http.auth.Credentials {
    ctor @Deprecated public NTCredentials(String);
    ctor @Deprecated public NTCredentials(String, String, String, String);
    method @Deprecated public String getDomain();
    method @Deprecated public String getPassword();
    method @Deprecated public String getUserName();
    method @Deprecated public java.security.Principal getUserPrincipal();
    method @Deprecated public String getWorkstation();
  }

  @Deprecated public class NTUserPrincipal implements java.security.Principal {
    ctor @Deprecated public NTUserPrincipal(String, String);
    method @Deprecated public String getDomain();
    method @Deprecated public String getName();
    method @Deprecated public String getUsername();
  }

  @Deprecated public class UsernamePasswordCredentials implements org.apache.http.auth.Credentials {
    ctor @Deprecated public UsernamePasswordCredentials(String);
    ctor @Deprecated public UsernamePasswordCredentials(String, String);
    method @Deprecated public String getPassword();
    method @Deprecated public String getUserName();
    method @Deprecated public java.security.Principal getUserPrincipal();
  }

}

package org.apache.http.auth.params {

  @Deprecated public interface AuthPNames {
    field @Deprecated public static final String CREDENTIAL_CHARSET = "http.auth.credential-charset";
  }

  @Deprecated public class AuthParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor @Deprecated public AuthParamBean(org.apache.http.params.HttpParams);
    method @Deprecated public void setCredentialCharset(String);
  }

  @Deprecated public final class AuthParams {
    method @Deprecated public static String getCredentialCharset(org.apache.http.params.HttpParams);
    method @Deprecated public static void setCredentialCharset(org.apache.http.params.HttpParams, String);
  }

}

package org.apache.http.client {

  @Deprecated public interface AuthenticationHandler {
    method @Deprecated public java.util.Map<java.lang.String,org.apache.http.Header> getChallenges(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.MalformedChallengeException;
    method @Deprecated public boolean isAuthenticationRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
    method @Deprecated public org.apache.http.auth.AuthScheme selectScheme(java.util.Map<java.lang.String,org.apache.http.Header>, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.AuthenticationException;
  }

  @Deprecated public class CircularRedirectException extends org.apache.http.client.RedirectException {
    ctor @Deprecated public CircularRedirectException();
    ctor @Deprecated public CircularRedirectException(String);
    ctor @Deprecated public CircularRedirectException(String, Throwable);
  }

  @Deprecated public class ClientProtocolException extends java.io.IOException {
    ctor @Deprecated public ClientProtocolException();
    ctor @Deprecated public ClientProtocolException(String);
    ctor @Deprecated public ClientProtocolException(Throwable);
    ctor @Deprecated public ClientProtocolException(String, Throwable);
  }

  @Deprecated public interface CookieStore {
    method @Deprecated public void addCookie(org.apache.http.cookie.Cookie);
    method @Deprecated public void clear();
    method @Deprecated public boolean clearExpired(java.util.Date);
    method @Deprecated public java.util.List<org.apache.http.cookie.Cookie> getCookies();
  }

  @Deprecated public interface CredentialsProvider {
    method @Deprecated public void clear();
    method @Deprecated public org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope);
    method @Deprecated public void setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.Credentials);
  }

  @Deprecated public interface HttpClient {
    method @Deprecated public org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public <T> T execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public <T> T execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public <T> T execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public <T> T execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public org.apache.http.conn.ClientConnectionManager getConnectionManager();
    method @Deprecated public org.apache.http.params.HttpParams getParams();
  }

  @Deprecated public interface HttpRequestRetryHandler {
    method @Deprecated public boolean retryRequest(java.io.IOException, int, org.apache.http.protocol.HttpContext);
  }

  @Deprecated public class HttpResponseException extends org.apache.http.client.ClientProtocolException {
    ctor @Deprecated public HttpResponseException(int, String);
    method @Deprecated public int getStatusCode();
  }

  @Deprecated public class NonRepeatableRequestException extends org.apache.http.ProtocolException {
    ctor @Deprecated public NonRepeatableRequestException();
    ctor @Deprecated public NonRepeatableRequestException(String);
  }

  @Deprecated public class RedirectException extends org.apache.http.ProtocolException {
    ctor @Deprecated public RedirectException();
    ctor @Deprecated public RedirectException(String);
    ctor @Deprecated public RedirectException(String, Throwable);
  }

  @Deprecated public interface RedirectHandler {
    method @Deprecated public java.net.URI getLocationURI(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.ProtocolException;
    method @Deprecated public boolean isRedirectRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  @Deprecated public interface RequestDirector {
    method @Deprecated public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public interface ResponseHandler<T> {
    method @Deprecated public T handleResponse(org.apache.http.HttpResponse) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
  }

  @Deprecated public interface UserTokenHandler {
    method @Deprecated public Object getUserToken(org.apache.http.protocol.HttpContext);
  }

}

package org.apache.http.client.entity {

  @Deprecated public class UrlEncodedFormEntity extends org.apache.http.entity.StringEntity {
    ctor @Deprecated public UrlEncodedFormEntity(java.util.List<? extends org.apache.http.NameValuePair>, String) throws java.io.UnsupportedEncodingException;
    ctor @Deprecated public UrlEncodedFormEntity(java.util.List<? extends org.apache.http.NameValuePair>) throws java.io.UnsupportedEncodingException;
  }

}

package org.apache.http.client.methods {

  @Deprecated public interface AbortableHttpRequest {
    method @Deprecated public void abort();
    method @Deprecated public void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) throws java.io.IOException;
    method @Deprecated public void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) throws java.io.IOException;
  }

  @Deprecated public class HttpDelete extends org.apache.http.client.methods.HttpRequestBase {
    ctor @Deprecated public HttpDelete();
    ctor @Deprecated public HttpDelete(java.net.URI);
    ctor @Deprecated public HttpDelete(String);
    method @Deprecated public String getMethod();
    field @Deprecated public static final String METHOD_NAME = "DELETE";
  }

  @Deprecated public abstract class HttpEntityEnclosingRequestBase extends org.apache.http.client.methods.HttpRequestBase implements org.apache.http.HttpEntityEnclosingRequest {
    ctor @Deprecated public HttpEntityEnclosingRequestBase();
    method @Deprecated public boolean expectContinue();
    method @Deprecated public org.apache.http.HttpEntity getEntity();
    method @Deprecated public void setEntity(org.apache.http.HttpEntity);
  }

  @Deprecated public class HttpGet extends org.apache.http.client.methods.HttpRequestBase {
    ctor @Deprecated public HttpGet();
    ctor @Deprecated public HttpGet(java.net.URI);
    ctor @Deprecated public HttpGet(String);
    method @Deprecated public String getMethod();
    field @Deprecated public static final String METHOD_NAME = "GET";
  }

  @Deprecated public class HttpHead extends org.apache.http.client.methods.HttpRequestBase {
    ctor @Deprecated public HttpHead();
    ctor @Deprecated public HttpHead(java.net.URI);
    ctor @Deprecated public HttpHead(String);
    method @Deprecated public String getMethod();
    field @Deprecated public static final String METHOD_NAME = "HEAD";
  }

  @Deprecated public class HttpOptions extends org.apache.http.client.methods.HttpRequestBase {
    ctor @Deprecated public HttpOptions();
    ctor @Deprecated public HttpOptions(java.net.URI);
    ctor @Deprecated public HttpOptions(String);
    method @Deprecated public java.util.Set<java.lang.String> getAllowedMethods(org.apache.http.HttpResponse);
    method @Deprecated public String getMethod();
    field @Deprecated public static final String METHOD_NAME = "OPTIONS";
  }

  @Deprecated public class HttpPost extends org.apache.http.client.methods.HttpEntityEnclosingRequestBase {
    ctor @Deprecated public HttpPost();
    ctor @Deprecated public HttpPost(java.net.URI);
    ctor @Deprecated public HttpPost(String);
    method @Deprecated public String getMethod();
    field @Deprecated public static final String METHOD_NAME = "POST";
  }

  @Deprecated public class HttpPut extends org.apache.http.client.methods.HttpEntityEnclosingRequestBase {
    ctor @Deprecated public HttpPut();
    ctor @Deprecated public HttpPut(java.net.URI);
    ctor @Deprecated public HttpPut(String);
    method @Deprecated public String getMethod();
    field @Deprecated public static final String METHOD_NAME = "PUT";
  }

  @Deprecated public abstract class HttpRequestBase extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.client.methods.AbortableHttpRequest java.lang.Cloneable org.apache.http.client.methods.HttpUriRequest {
    ctor @Deprecated public HttpRequestBase();
    method @Deprecated public void abort();
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public org.apache.http.ProtocolVersion getProtocolVersion();
    method @Deprecated public org.apache.http.RequestLine getRequestLine();
    method @Deprecated public java.net.URI getURI();
    method @Deprecated public boolean isAborted();
    method @Deprecated public void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) throws java.io.IOException;
    method @Deprecated public void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) throws java.io.IOException;
    method @Deprecated public void setURI(java.net.URI);
  }

  @Deprecated public class HttpTrace extends org.apache.http.client.methods.HttpRequestBase {
    ctor @Deprecated public HttpTrace();
    ctor @Deprecated public HttpTrace(java.net.URI);
    ctor @Deprecated public HttpTrace(String);
    method @Deprecated public String getMethod();
    field @Deprecated public static final String METHOD_NAME = "TRACE";
  }

  @Deprecated public interface HttpUriRequest extends org.apache.http.HttpRequest {
    method @Deprecated public void abort() throws java.lang.UnsupportedOperationException;
    method @Deprecated public String getMethod();
    method @Deprecated public java.net.URI getURI();
    method @Deprecated public boolean isAborted();
  }

}

package org.apache.http.client.params {

  @Deprecated public interface AllClientPNames extends org.apache.http.params.CoreConnectionPNames org.apache.http.auth.params.AuthPNames org.apache.http.client.params.ClientPNames org.apache.http.conn.params.ConnConnectionPNames org.apache.http.conn.params.ConnManagerPNames org.apache.http.conn.params.ConnRoutePNames org.apache.http.cookie.params.CookieSpecPNames org.apache.http.params.CoreProtocolPNames {
  }

  @Deprecated public final class AuthPolicy {
    field @Deprecated public static final String BASIC = "Basic";
    field @Deprecated public static final String DIGEST = "Digest";
    field @Deprecated public static final String NTLM = "NTLM";
  }

  @Deprecated public interface ClientPNames {
    field @Deprecated public static final String ALLOW_CIRCULAR_REDIRECTS = "http.protocol.allow-circular-redirects";
    field @Deprecated public static final String CONNECTION_MANAGER_FACTORY = "http.connection-manager.factory-object";
    field @Deprecated public static final String CONNECTION_MANAGER_FACTORY_CLASS_NAME = "http.connection-manager.factory-class-name";
    field @Deprecated public static final String COOKIE_POLICY = "http.protocol.cookie-policy";
    field @Deprecated public static final String DEFAULT_HEADERS = "http.default-headers";
    field @Deprecated public static final String DEFAULT_HOST = "http.default-host";
    field @Deprecated public static final String HANDLE_AUTHENTICATION = "http.protocol.handle-authentication";
    field @Deprecated public static final String HANDLE_REDIRECTS = "http.protocol.handle-redirects";
    field @Deprecated public static final String MAX_REDIRECTS = "http.protocol.max-redirects";
    field @Deprecated public static final String REJECT_RELATIVE_REDIRECT = "http.protocol.reject-relative-redirect";
    field @Deprecated public static final String VIRTUAL_HOST = "http.virtual-host";
  }

  @Deprecated public class ClientParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor @Deprecated public ClientParamBean(org.apache.http.params.HttpParams);
    method @Deprecated public void setAllowCircularRedirects(boolean);
    method @Deprecated public void setConnectionManagerFactory(org.apache.http.conn.ClientConnectionManagerFactory);
    method @Deprecated public void setConnectionManagerFactoryClassName(String);
    method @Deprecated public void setCookiePolicy(String);
    method @Deprecated public void setDefaultHeaders(java.util.Collection<org.apache.http.Header>);
    method @Deprecated public void setDefaultHost(org.apache.http.HttpHost);
    method @Deprecated public void setHandleAuthentication(boolean);
    method @Deprecated public void setHandleRedirects(boolean);
    method @Deprecated public void setMaxRedirects(int);
    method @Deprecated public void setRejectRelativeRedirect(boolean);
    method @Deprecated public void setVirtualHost(org.apache.http.HttpHost);
  }

  @Deprecated public final class CookiePolicy {
    field @Deprecated public static final String BEST_MATCH = "best-match";
    field @Deprecated public static final String BROWSER_COMPATIBILITY = "compatibility";
    field @Deprecated public static final String NETSCAPE = "netscape";
    field @Deprecated public static final String RFC_2109 = "rfc2109";
    field @Deprecated public static final String RFC_2965 = "rfc2965";
  }

  @Deprecated public class HttpClientParams {
    method @Deprecated public static String getCookiePolicy(org.apache.http.params.HttpParams);
    method @Deprecated public static boolean isAuthenticating(org.apache.http.params.HttpParams);
    method @Deprecated public static boolean isRedirecting(org.apache.http.params.HttpParams);
    method @Deprecated public static void setAuthenticating(org.apache.http.params.HttpParams, boolean);
    method @Deprecated public static void setCookiePolicy(org.apache.http.params.HttpParams, String);
    method @Deprecated public static void setRedirecting(org.apache.http.params.HttpParams, boolean);
  }

}

package org.apache.http.client.protocol {

  @Deprecated public interface ClientContext {
    field @Deprecated public static final String AUTHSCHEME_REGISTRY = "http.authscheme-registry";
    field @Deprecated public static final String AUTH_SCHEME_PREF = "http.auth.scheme-pref";
    field @Deprecated public static final String COOKIESPEC_REGISTRY = "http.cookiespec-registry";
    field @Deprecated public static final String COOKIE_ORIGIN = "http.cookie-origin";
    field @Deprecated public static final String COOKIE_SPEC = "http.cookie-spec";
    field @Deprecated public static final String COOKIE_STORE = "http.cookie-store";
    field @Deprecated public static final String CREDS_PROVIDER = "http.auth.credentials-provider";
    field @Deprecated public static final String PROXY_AUTH_STATE = "http.auth.proxy-scope";
    field @Deprecated public static final String TARGET_AUTH_STATE = "http.auth.target-scope";
    field @Deprecated public static final String USER_TOKEN = "http.user-token";
  }

  @Deprecated public class ClientContextConfigurer implements org.apache.http.client.protocol.ClientContext {
    ctor @Deprecated public ClientContextConfigurer(org.apache.http.protocol.HttpContext);
    method @Deprecated public void setAuthSchemePref(java.util.List<java.lang.String>);
    method @Deprecated public void setAuthSchemeRegistry(org.apache.http.auth.AuthSchemeRegistry);
    method @Deprecated public void setCookieSpecRegistry(org.apache.http.cookie.CookieSpecRegistry);
    method @Deprecated public void setCookieStore(org.apache.http.client.CookieStore);
    method @Deprecated public void setCredentialsProvider(org.apache.http.client.CredentialsProvider);
  }

  @Deprecated public class RequestAddCookies implements org.apache.http.HttpRequestInterceptor {
    ctor @Deprecated public RequestAddCookies();
    method @Deprecated public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class RequestDefaultHeaders implements org.apache.http.HttpRequestInterceptor {
    ctor @Deprecated public RequestDefaultHeaders();
    method @Deprecated public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class RequestProxyAuthentication implements org.apache.http.HttpRequestInterceptor {
    ctor @Deprecated public RequestProxyAuthentication();
    method @Deprecated public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class RequestTargetAuthentication implements org.apache.http.HttpRequestInterceptor {
    ctor @Deprecated public RequestTargetAuthentication();
    method @Deprecated public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class ResponseProcessCookies implements org.apache.http.HttpResponseInterceptor {
    ctor @Deprecated public ResponseProcessCookies();
    method @Deprecated public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

}

package org.apache.http.client.utils {

  @Deprecated public class CloneUtils {
    method @Deprecated public static Object clone(Object) throws java.lang.CloneNotSupportedException;
  }

  @Deprecated public class URIUtils {
    method @Deprecated public static java.net.URI createURI(String, String, int, String, String, String) throws java.net.URISyntaxException;
    method @Deprecated public static java.net.URI resolve(java.net.URI, String);
    method @Deprecated public static java.net.URI resolve(java.net.URI, java.net.URI);
    method @Deprecated public static java.net.URI rewriteURI(java.net.URI, org.apache.http.HttpHost, boolean) throws java.net.URISyntaxException;
    method @Deprecated public static java.net.URI rewriteURI(java.net.URI, org.apache.http.HttpHost) throws java.net.URISyntaxException;
  }

  @Deprecated public class URLEncodedUtils {
    ctor @Deprecated public URLEncodedUtils();
    method @Deprecated public static String format(java.util.List<? extends org.apache.http.NameValuePair>, String);
    method @Deprecated public static boolean isEncoded(org.apache.http.HttpEntity);
    method @Deprecated public static java.util.List<org.apache.http.NameValuePair> parse(java.net.URI, String);
    method @Deprecated public static java.util.List<org.apache.http.NameValuePair> parse(org.apache.http.HttpEntity) throws java.io.IOException;
    method @Deprecated public static void parse(java.util.List<org.apache.http.NameValuePair>, java.util.Scanner, String);
    field @Deprecated public static final String CONTENT_TYPE = "application/x-www-form-urlencoded";
  }

}

package org.apache.http.conn {

  @Deprecated public class BasicEofSensorWatcher implements org.apache.http.conn.EofSensorWatcher {
    ctor @Deprecated public BasicEofSensorWatcher(org.apache.http.conn.ManagedClientConnection, boolean);
    method @Deprecated public boolean eofDetected(java.io.InputStream) throws java.io.IOException;
    method @Deprecated public boolean streamAbort(java.io.InputStream) throws java.io.IOException;
    method @Deprecated public boolean streamClosed(java.io.InputStream) throws java.io.IOException;
    field @Deprecated protected boolean attemptReuse;
    field @Deprecated protected org.apache.http.conn.ManagedClientConnection managedConn;
  }

  @Deprecated public class BasicManagedEntity extends org.apache.http.entity.HttpEntityWrapper implements org.apache.http.conn.ConnectionReleaseTrigger org.apache.http.conn.EofSensorWatcher {
    ctor @Deprecated public BasicManagedEntity(org.apache.http.HttpEntity, org.apache.http.conn.ManagedClientConnection, boolean);
    method @Deprecated public void abortConnection() throws java.io.IOException;
    method @Deprecated public boolean eofDetected(java.io.InputStream) throws java.io.IOException;
    method @Deprecated public void releaseConnection() throws java.io.IOException;
    method @Deprecated protected void releaseManagedConnection() throws java.io.IOException;
    method @Deprecated public boolean streamAbort(java.io.InputStream) throws java.io.IOException;
    method @Deprecated public boolean streamClosed(java.io.InputStream) throws java.io.IOException;
    field @Deprecated protected final boolean attemptReuse;
    field @Deprecated protected org.apache.http.conn.ManagedClientConnection managedConn;
  }

  @Deprecated public interface ClientConnectionManager {
    method @Deprecated public void closeExpiredConnections();
    method @Deprecated public void closeIdleConnections(long, java.util.concurrent.TimeUnit);
    method @Deprecated public org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry();
    method @Deprecated public void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit);
    method @Deprecated public org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, Object);
    method @Deprecated public void shutdown();
  }

  @Deprecated public interface ClientConnectionManagerFactory {
    method @Deprecated public org.apache.http.conn.ClientConnectionManager newInstance(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry);
  }

  @Deprecated public interface ClientConnectionOperator {
    method @Deprecated public org.apache.http.conn.OperatedClientConnection createConnection();
    method @Deprecated public void openConnection(org.apache.http.conn.OperatedClientConnection, org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void updateSecureConnection(org.apache.http.conn.OperatedClientConnection, org.apache.http.HttpHost, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
  }

  @Deprecated public interface ClientConnectionRequest {
    method @Deprecated public void abortRequest();
    method @Deprecated public org.apache.http.conn.ManagedClientConnection getConnection(long, java.util.concurrent.TimeUnit) throws org.apache.http.conn.ConnectionPoolTimeoutException, java.lang.InterruptedException;
  }

  @Deprecated public interface ConnectionKeepAliveStrategy {
    method @Deprecated public long getKeepAliveDuration(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  @Deprecated public class ConnectionPoolTimeoutException extends org.apache.http.conn.ConnectTimeoutException {
    ctor @Deprecated public ConnectionPoolTimeoutException();
    ctor @Deprecated public ConnectionPoolTimeoutException(String);
  }

  @Deprecated public interface ConnectionReleaseTrigger {
    method @Deprecated public void abortConnection() throws java.io.IOException;
    method @Deprecated public void releaseConnection() throws java.io.IOException;
  }

  @Deprecated public class EofSensorInputStream extends java.io.InputStream implements org.apache.http.conn.ConnectionReleaseTrigger {
    ctor @Deprecated public EofSensorInputStream(java.io.InputStream, org.apache.http.conn.EofSensorWatcher);
    method @Deprecated public void abortConnection() throws java.io.IOException;
    method @Deprecated protected void checkAbort() throws java.io.IOException;
    method @Deprecated protected void checkClose() throws java.io.IOException;
    method @Deprecated protected void checkEOF(int) throws java.io.IOException;
    method @Deprecated protected boolean isReadAllowed() throws java.io.IOException;
    method @Deprecated public int read() throws java.io.IOException;
    method @Deprecated public void releaseConnection() throws java.io.IOException;
    field @Deprecated protected java.io.InputStream wrappedStream;
  }

  @Deprecated public interface EofSensorWatcher {
    method @Deprecated public boolean eofDetected(java.io.InputStream) throws java.io.IOException;
    method @Deprecated public boolean streamAbort(java.io.InputStream) throws java.io.IOException;
    method @Deprecated public boolean streamClosed(java.io.InputStream) throws java.io.IOException;
  }

  @Deprecated public class HttpHostConnectException extends java.net.ConnectException {
    ctor @Deprecated public HttpHostConnectException(org.apache.http.HttpHost, java.net.ConnectException);
    method @Deprecated public org.apache.http.HttpHost getHost();
  }

  @Deprecated public interface ManagedClientConnection extends org.apache.http.HttpClientConnection org.apache.http.conn.ConnectionReleaseTrigger org.apache.http.HttpInetConnection {
    method @Deprecated public org.apache.http.conn.routing.HttpRoute getRoute();
    method @Deprecated public javax.net.ssl.SSLSession getSSLSession();
    method @Deprecated public Object getState();
    method @Deprecated public boolean isMarkedReusable();
    method @Deprecated public boolean isSecure();
    method @Deprecated public void layerProtocol(org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void markReusable();
    method @Deprecated public void open(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void setIdleDuration(long, java.util.concurrent.TimeUnit);
    method @Deprecated public void setState(Object);
    method @Deprecated public void tunnelProxy(org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void tunnelTarget(boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void unmarkReusable();
  }

  @Deprecated public final class MultihomePlainSocketFactory implements org.apache.http.conn.scheme.SocketFactory {
    method @Deprecated public java.net.Socket connectSocket(java.net.Socket, String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public java.net.Socket createSocket();
    method @Deprecated public static org.apache.http.conn.MultihomePlainSocketFactory getSocketFactory();
    method @Deprecated public boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException;
  }

  @Deprecated public interface OperatedClientConnection extends org.apache.http.HttpClientConnection org.apache.http.HttpInetConnection {
    method @Deprecated public java.net.Socket getSocket();
    method @Deprecated public org.apache.http.HttpHost getTargetHost();
    method @Deprecated public boolean isSecure();
    method @Deprecated public void openCompleted(boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void opening(java.net.Socket, org.apache.http.HttpHost) throws java.io.IOException;
    method @Deprecated public void update(java.net.Socket, org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
  }

}

package org.apache.http.conn.params {

  @Deprecated public interface ConnConnectionPNames {
    field @Deprecated public static final String MAX_STATUS_LINE_GARBAGE = "http.connection.max-status-line-garbage";
  }

  @Deprecated public class ConnConnectionParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor @Deprecated public ConnConnectionParamBean(org.apache.http.params.HttpParams);
    method @Deprecated public void setMaxStatusLineGarbage(int);
  }

  @Deprecated public interface ConnManagerPNames {
    field @Deprecated public static final String MAX_CONNECTIONS_PER_ROUTE = "http.conn-manager.max-per-route";
    field @Deprecated public static final String MAX_TOTAL_CONNECTIONS = "http.conn-manager.max-total";
    field @Deprecated public static final String TIMEOUT = "http.conn-manager.timeout";
  }

  @Deprecated public class ConnManagerParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor @Deprecated public ConnManagerParamBean(org.apache.http.params.HttpParams);
    method @Deprecated public void setConnectionsPerRoute(org.apache.http.conn.params.ConnPerRouteBean);
    method @Deprecated public void setMaxTotalConnections(int);
    method @Deprecated public void setTimeout(long);
  }

  @Deprecated public final class ConnManagerParams implements org.apache.http.conn.params.ConnManagerPNames {
    ctor @Deprecated public ConnManagerParams();
    method @Deprecated public static org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams);
    method @Deprecated public static int getMaxTotalConnections(org.apache.http.params.HttpParams);
    method @Deprecated public static long getTimeout(org.apache.http.params.HttpParams);
    method @Deprecated public static void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams, org.apache.http.conn.params.ConnPerRoute);
    method @Deprecated public static void setMaxTotalConnections(org.apache.http.params.HttpParams, int);
    method @Deprecated public static void setTimeout(org.apache.http.params.HttpParams, long);
    field @Deprecated public static final int DEFAULT_MAX_TOTAL_CONNECTIONS = 20; // 0x14
  }

  @Deprecated public interface ConnPerRoute {
    method @Deprecated public int getMaxForRoute(org.apache.http.conn.routing.HttpRoute);
  }

  @Deprecated public final class ConnPerRouteBean implements org.apache.http.conn.params.ConnPerRoute {
    ctor @Deprecated public ConnPerRouteBean(int);
    ctor @Deprecated public ConnPerRouteBean();
    method @Deprecated public int getDefaultMax();
    method @Deprecated public int getMaxForRoute(org.apache.http.conn.routing.HttpRoute);
    method @Deprecated public void setDefaultMaxPerRoute(int);
    method @Deprecated public void setMaxForRoute(org.apache.http.conn.routing.HttpRoute, int);
    method @Deprecated public void setMaxForRoutes(java.util.Map<org.apache.http.conn.routing.HttpRoute,java.lang.Integer>);
    field @Deprecated public static final int DEFAULT_MAX_CONNECTIONS_PER_ROUTE = 2; // 0x2
  }

  @Deprecated public interface ConnRoutePNames {
    field @Deprecated public static final String DEFAULT_PROXY = "http.route.default-proxy";
    field @Deprecated public static final String FORCED_ROUTE = "http.route.forced-route";
    field @Deprecated public static final String LOCAL_ADDRESS = "http.route.local-address";
  }

  @Deprecated public class ConnRouteParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor @Deprecated public ConnRouteParamBean(org.apache.http.params.HttpParams);
    method @Deprecated public void setDefaultProxy(org.apache.http.HttpHost);
    method @Deprecated public void setForcedRoute(org.apache.http.conn.routing.HttpRoute);
    method @Deprecated public void setLocalAddress(java.net.InetAddress);
  }

  @Deprecated public class ConnRouteParams implements org.apache.http.conn.params.ConnRoutePNames {
    method @Deprecated public static org.apache.http.HttpHost getDefaultProxy(org.apache.http.params.HttpParams);
    method @Deprecated public static org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams);
    method @Deprecated public static java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams);
    method @Deprecated public static void setDefaultProxy(org.apache.http.params.HttpParams, org.apache.http.HttpHost);
    method @Deprecated public static void setForcedRoute(org.apache.http.params.HttpParams, org.apache.http.conn.routing.HttpRoute);
    method @Deprecated public static void setLocalAddress(org.apache.http.params.HttpParams, java.net.InetAddress);
    field @Deprecated public static final org.apache.http.HttpHost NO_HOST;
    field @Deprecated public static final org.apache.http.conn.routing.HttpRoute NO_ROUTE;
  }

}

package org.apache.http.conn.routing {

  @Deprecated public class BasicRouteDirector implements org.apache.http.conn.routing.HttpRouteDirector {
    ctor @Deprecated public BasicRouteDirector();
    method @Deprecated protected int directStep(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo);
    method @Deprecated protected int firstStep(org.apache.http.conn.routing.RouteInfo);
    method @Deprecated public int nextStep(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo);
    method @Deprecated protected int proxiedStep(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo);
  }

  @Deprecated public final class HttpRoute implements java.lang.Cloneable org.apache.http.conn.routing.RouteInfo {
    ctor @Deprecated public HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost[], boolean, org.apache.http.conn.routing.RouteInfo.TunnelType, org.apache.http.conn.routing.RouteInfo.LayerType);
    ctor @Deprecated public HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost, boolean, org.apache.http.conn.routing.RouteInfo.TunnelType, org.apache.http.conn.routing.RouteInfo.LayerType);
    ctor @Deprecated public HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, boolean);
    ctor @Deprecated public HttpRoute(org.apache.http.HttpHost);
    ctor @Deprecated public HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost, boolean);
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public int getHopCount();
    method @Deprecated public org.apache.http.HttpHost getHopTarget(int);
    method @Deprecated public org.apache.http.conn.routing.RouteInfo.LayerType getLayerType();
    method @Deprecated public java.net.InetAddress getLocalAddress();
    method @Deprecated public org.apache.http.HttpHost getProxyHost();
    method @Deprecated public org.apache.http.HttpHost getTargetHost();
    method @Deprecated public org.apache.http.conn.routing.RouteInfo.TunnelType getTunnelType();
    method @Deprecated public boolean isLayered();
    method @Deprecated public boolean isSecure();
    method @Deprecated public boolean isTunnelled();
  }

  @Deprecated public interface HttpRouteDirector {
    method @Deprecated public int nextStep(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo);
    field @Deprecated public static final int COMPLETE = 0; // 0x0
    field @Deprecated public static final int CONNECT_PROXY = 2; // 0x2
    field @Deprecated public static final int CONNECT_TARGET = 1; // 0x1
    field @Deprecated public static final int LAYER_PROTOCOL = 5; // 0x5
    field @Deprecated public static final int TUNNEL_PROXY = 4; // 0x4
    field @Deprecated public static final int TUNNEL_TARGET = 3; // 0x3
    field @Deprecated public static final int UNREACHABLE = -1; // 0xffffffff
  }

  @Deprecated public interface HttpRoutePlanner {
    method @Deprecated public org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException;
  }

  @Deprecated public interface RouteInfo {
    method @Deprecated public int getHopCount();
    method @Deprecated public org.apache.http.HttpHost getHopTarget(int);
    method @Deprecated public org.apache.http.conn.routing.RouteInfo.LayerType getLayerType();
    method @Deprecated public java.net.InetAddress getLocalAddress();
    method @Deprecated public org.apache.http.HttpHost getProxyHost();
    method @Deprecated public org.apache.http.HttpHost getTargetHost();
    method @Deprecated public org.apache.http.conn.routing.RouteInfo.TunnelType getTunnelType();
    method @Deprecated public boolean isLayered();
    method @Deprecated public boolean isSecure();
    method @Deprecated public boolean isTunnelled();
  }

  @Deprecated public enum RouteInfo.LayerType {
    enum_constant @Deprecated public static final org.apache.http.conn.routing.RouteInfo.LayerType LAYERED;
    enum_constant @Deprecated public static final org.apache.http.conn.routing.RouteInfo.LayerType PLAIN;
  }

  @Deprecated public enum RouteInfo.TunnelType {
    enum_constant @Deprecated public static final org.apache.http.conn.routing.RouteInfo.TunnelType PLAIN;
    enum_constant @Deprecated public static final org.apache.http.conn.routing.RouteInfo.TunnelType TUNNELLED;
  }

  @Deprecated public final class RouteTracker implements java.lang.Cloneable org.apache.http.conn.routing.RouteInfo {
    ctor @Deprecated public RouteTracker(org.apache.http.HttpHost, java.net.InetAddress);
    ctor @Deprecated public RouteTracker(org.apache.http.conn.routing.HttpRoute);
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public void connectProxy(org.apache.http.HttpHost, boolean);
    method @Deprecated public void connectTarget(boolean);
    method @Deprecated public int getHopCount();
    method @Deprecated public org.apache.http.HttpHost getHopTarget(int);
    method @Deprecated public org.apache.http.conn.routing.RouteInfo.LayerType getLayerType();
    method @Deprecated public java.net.InetAddress getLocalAddress();
    method @Deprecated public org.apache.http.HttpHost getProxyHost();
    method @Deprecated public org.apache.http.HttpHost getTargetHost();
    method @Deprecated public org.apache.http.conn.routing.RouteInfo.TunnelType getTunnelType();
    method @Deprecated public boolean isConnected();
    method @Deprecated public boolean isLayered();
    method @Deprecated public boolean isSecure();
    method @Deprecated public boolean isTunnelled();
    method @Deprecated public void layerProtocol(boolean);
    method @Deprecated public org.apache.http.conn.routing.HttpRoute toRoute();
    method @Deprecated public void tunnelProxy(org.apache.http.HttpHost, boolean);
    method @Deprecated public void tunnelTarget(boolean);
  }

}

package org.apache.http.conn.scheme {

  @Deprecated public final class PlainSocketFactory implements org.apache.http.conn.scheme.SocketFactory {
    ctor @Deprecated public PlainSocketFactory(org.apache.http.conn.scheme.HostNameResolver);
    ctor @Deprecated public PlainSocketFactory();
    method @Deprecated public java.net.Socket connectSocket(java.net.Socket, String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public java.net.Socket createSocket();
    method @Deprecated public static org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory();
    method @Deprecated public boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException;
  }

  @Deprecated public final class Scheme {
    ctor @Deprecated public Scheme(String, org.apache.http.conn.scheme.SocketFactory, int);
    method @Deprecated public int getDefaultPort();
    method @Deprecated public String getName();
    method @Deprecated public org.apache.http.conn.scheme.SocketFactory getSocketFactory();
    method @Deprecated public boolean isLayered();
    method @Deprecated public int resolvePort(int);
  }

  @Deprecated public final class SchemeRegistry {
    ctor @Deprecated public SchemeRegistry();
    method @Deprecated public org.apache.http.conn.scheme.Scheme get(String);
    method @Deprecated public org.apache.http.conn.scheme.Scheme getScheme(String);
    method @Deprecated public org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost);
    method @Deprecated public java.util.List<java.lang.String> getSchemeNames();
    method @Deprecated public org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme);
    method @Deprecated public void setItems(java.util.Map<java.lang.String,org.apache.http.conn.scheme.Scheme>);
    method @Deprecated public org.apache.http.conn.scheme.Scheme unregister(String);
  }

}

package org.apache.http.conn.util {

  @Deprecated public class InetAddressUtils {
    method @Deprecated public static boolean isIPv4Address(String);
    method @Deprecated public static boolean isIPv6Address(String);
    method @Deprecated public static boolean isIPv6HexCompressedAddress(String);
    method @Deprecated public static boolean isIPv6StdAddress(String);
  }

}

package org.apache.http.cookie {

  @Deprecated public interface ClientCookie extends org.apache.http.cookie.Cookie {
    method @Deprecated public boolean containsAttribute(String);
    method @Deprecated public String getAttribute(String);
    field @Deprecated public static final String COMMENTURL_ATTR = "commenturl";
    field @Deprecated public static final String COMMENT_ATTR = "comment";
    field @Deprecated public static final String DISCARD_ATTR = "discard";
    field @Deprecated public static final String DOMAIN_ATTR = "domain";
    field @Deprecated public static final String EXPIRES_ATTR = "expires";
    field @Deprecated public static final String MAX_AGE_ATTR = "max-age";
    field @Deprecated public static final String PATH_ATTR = "path";
    field @Deprecated public static final String PORT_ATTR = "port";
    field @Deprecated public static final String SECURE_ATTR = "secure";
    field @Deprecated public static final String VERSION_ATTR = "version";
  }

  @Deprecated public interface Cookie {
    method @Deprecated public String getComment();
    method @Deprecated public String getCommentURL();
    method @Deprecated public String getDomain();
    method @Deprecated public java.util.Date getExpiryDate();
    method @Deprecated public String getName();
    method @Deprecated public String getPath();
    method @Deprecated public int[] getPorts();
    method @Deprecated public String getValue();
    method @Deprecated public int getVersion();
    method @Deprecated public boolean isExpired(java.util.Date);
    method @Deprecated public boolean isPersistent();
    method @Deprecated public boolean isSecure();
  }

  @Deprecated public interface CookieAttributeHandler {
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class CookieIdentityComparator implements java.util.Comparator<org.apache.http.cookie.Cookie> java.io.Serializable {
    ctor @Deprecated public CookieIdentityComparator();
    method @Deprecated public int compare(org.apache.http.cookie.Cookie, org.apache.http.cookie.Cookie);
  }

  @Deprecated public final class CookieOrigin {
    ctor @Deprecated public CookieOrigin(String, int, String, boolean);
    method @Deprecated public String getHost();
    method @Deprecated public String getPath();
    method @Deprecated public int getPort();
    method @Deprecated public boolean isSecure();
  }

  @Deprecated public class CookiePathComparator implements java.util.Comparator<org.apache.http.cookie.Cookie> java.io.Serializable {
    ctor @Deprecated public CookiePathComparator();
    method @Deprecated public int compare(org.apache.http.cookie.Cookie, org.apache.http.cookie.Cookie);
  }

  @Deprecated public interface CookieSpec {
    method @Deprecated public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
    method @Deprecated public int getVersion();
    method @Deprecated public org.apache.http.Header getVersionHeader();
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated public java.util.List<org.apache.http.cookie.Cookie> parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public interface CookieSpecFactory {
    method @Deprecated public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
  }

  @Deprecated public final class CookieSpecRegistry {
    ctor @Deprecated public CookieSpecRegistry();
    method @Deprecated public org.apache.http.cookie.CookieSpec getCookieSpec(String, org.apache.http.params.HttpParams) throws java.lang.IllegalStateException;
    method @Deprecated public org.apache.http.cookie.CookieSpec getCookieSpec(String) throws java.lang.IllegalStateException;
    method @Deprecated public java.util.List<java.lang.String> getSpecNames();
    method @Deprecated public void register(String, org.apache.http.cookie.CookieSpecFactory);
    method @Deprecated public void setItems(java.util.Map<java.lang.String,org.apache.http.cookie.CookieSpecFactory>);
    method @Deprecated public void unregister(String);
  }

  @Deprecated public class MalformedCookieException extends org.apache.http.ProtocolException {
    ctor @Deprecated public MalformedCookieException();
    ctor @Deprecated public MalformedCookieException(String);
    ctor @Deprecated public MalformedCookieException(String, Throwable);
  }

  @Deprecated public interface SM {
    field @Deprecated public static final String COOKIE = "Cookie";
    field @Deprecated public static final String COOKIE2 = "Cookie2";
    field @Deprecated public static final String SET_COOKIE = "Set-Cookie";
    field @Deprecated public static final String SET_COOKIE2 = "Set-Cookie2";
  }

  @Deprecated public interface SetCookie extends org.apache.http.cookie.Cookie {
    method @Deprecated public void setComment(String);
    method @Deprecated public void setDomain(String);
    method @Deprecated public void setExpiryDate(java.util.Date);
    method @Deprecated public void setPath(String);
    method @Deprecated public void setSecure(boolean);
    method @Deprecated public void setValue(String);
    method @Deprecated public void setVersion(int);
  }

  @Deprecated public interface SetCookie2 extends org.apache.http.cookie.SetCookie {
    method @Deprecated public void setCommentURL(String);
    method @Deprecated public void setDiscard(boolean);
    method @Deprecated public void setPorts(int[]);
  }

}

package org.apache.http.cookie.params {

  @Deprecated public interface CookieSpecPNames {
    field @Deprecated public static final String DATE_PATTERNS = "http.protocol.cookie-datepatterns";
    field @Deprecated public static final String SINGLE_COOKIE_HEADER = "http.protocol.single-cookie-header";
  }

  @Deprecated public class CookieSpecParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor @Deprecated public CookieSpecParamBean(org.apache.http.params.HttpParams);
    method @Deprecated public void setDatePatterns(java.util.Collection<java.lang.String>);
    method @Deprecated public void setSingleHeader(boolean);
  }

}

package org.apache.http.entity {

  @Deprecated public abstract class AbstractHttpEntity implements org.apache.http.HttpEntity {
    ctor @Deprecated protected AbstractHttpEntity();
    method @Deprecated public void consumeContent() throws java.io.IOException, java.lang.UnsupportedOperationException;
    method @Deprecated public org.apache.http.Header getContentEncoding();
    method @Deprecated public org.apache.http.Header getContentType();
    method @Deprecated public boolean isChunked();
    method @Deprecated public void setChunked(boolean);
    method @Deprecated public void setContentEncoding(org.apache.http.Header);
    method @Deprecated public void setContentEncoding(String);
    method @Deprecated public void setContentType(org.apache.http.Header);
    method @Deprecated public void setContentType(String);
    field @Deprecated protected boolean chunked;
    field @Deprecated protected org.apache.http.Header contentEncoding;
    field @Deprecated protected org.apache.http.Header contentType;
  }

  @Deprecated public class BasicHttpEntity extends org.apache.http.entity.AbstractHttpEntity {
    ctor @Deprecated public BasicHttpEntity();
    method @Deprecated public void consumeContent() throws java.io.IOException;
    method @Deprecated public java.io.InputStream getContent() throws java.lang.IllegalStateException;
    method @Deprecated public long getContentLength();
    method @Deprecated public boolean isRepeatable();
    method @Deprecated public boolean isStreaming();
    method @Deprecated public void setContent(java.io.InputStream);
    method @Deprecated public void setContentLength(long);
    method @Deprecated public void writeTo(java.io.OutputStream) throws java.io.IOException;
  }

  @Deprecated public class BufferedHttpEntity extends org.apache.http.entity.HttpEntityWrapper {
    ctor @Deprecated public BufferedHttpEntity(org.apache.http.HttpEntity) throws java.io.IOException;
  }

  @Deprecated public class ByteArrayEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable {
    ctor @Deprecated public ByteArrayEntity(byte[]);
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public java.io.InputStream getContent();
    method @Deprecated public long getContentLength();
    method @Deprecated public boolean isRepeatable();
    method @Deprecated public boolean isStreaming();
    method @Deprecated public void writeTo(java.io.OutputStream) throws java.io.IOException;
    field @Deprecated protected final byte[] content;
  }

  @Deprecated public interface ContentLengthStrategy {
    method @Deprecated public long determineLength(org.apache.http.HttpMessage) throws org.apache.http.HttpException;
    field @Deprecated public static final int CHUNKED = -2; // 0xfffffffe
    field @Deprecated public static final int IDENTITY = -1; // 0xffffffff
  }

  @Deprecated public interface ContentProducer {
    method @Deprecated public void writeTo(java.io.OutputStream) throws java.io.IOException;
  }

  @Deprecated public class EntityTemplate extends org.apache.http.entity.AbstractHttpEntity {
    ctor @Deprecated public EntityTemplate(org.apache.http.entity.ContentProducer);
    method @Deprecated public void consumeContent() throws java.io.IOException;
    method @Deprecated public java.io.InputStream getContent();
    method @Deprecated public long getContentLength();
    method @Deprecated public boolean isRepeatable();
    method @Deprecated public boolean isStreaming();
    method @Deprecated public void writeTo(java.io.OutputStream) throws java.io.IOException;
  }

  @Deprecated public class FileEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable {
    ctor @Deprecated public FileEntity(java.io.File, String);
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public java.io.InputStream getContent() throws java.io.IOException;
    method @Deprecated public long getContentLength();
    method @Deprecated public boolean isRepeatable();
    method @Deprecated public boolean isStreaming();
    method @Deprecated public void writeTo(java.io.OutputStream) throws java.io.IOException;
    field @Deprecated protected final java.io.File file;
  }

  @Deprecated public class HttpEntityWrapper implements org.apache.http.HttpEntity {
    ctor @Deprecated public HttpEntityWrapper(org.apache.http.HttpEntity);
    method @Deprecated public void consumeContent() throws java.io.IOException;
    method @Deprecated public java.io.InputStream getContent() throws java.io.IOException;
    method @Deprecated public org.apache.http.Header getContentEncoding();
    method @Deprecated public long getContentLength();
    method @Deprecated public org.apache.http.Header getContentType();
    method @Deprecated public boolean isChunked();
    method @Deprecated public boolean isRepeatable();
    method @Deprecated public boolean isStreaming();
    method @Deprecated public void writeTo(java.io.OutputStream) throws java.io.IOException;
    field @Deprecated protected org.apache.http.HttpEntity wrappedEntity;
  }

  @Deprecated public class InputStreamEntity extends org.apache.http.entity.AbstractHttpEntity {
    ctor @Deprecated public InputStreamEntity(java.io.InputStream, long);
    method @Deprecated public void consumeContent() throws java.io.IOException;
    method @Deprecated public java.io.InputStream getContent() throws java.io.IOException;
    method @Deprecated public long getContentLength();
    method @Deprecated public boolean isRepeatable();
    method @Deprecated public boolean isStreaming();
    method @Deprecated public void writeTo(java.io.OutputStream) throws java.io.IOException;
  }

  @Deprecated public class SerializableEntity extends org.apache.http.entity.AbstractHttpEntity {
    ctor @Deprecated public SerializableEntity(java.io.Serializable, boolean) throws java.io.IOException;
    method @Deprecated public java.io.InputStream getContent() throws java.io.IOException, java.lang.IllegalStateException;
    method @Deprecated public long getContentLength();
    method @Deprecated public boolean isRepeatable();
    method @Deprecated public boolean isStreaming();
    method @Deprecated public void writeTo(java.io.OutputStream) throws java.io.IOException;
  }

  @Deprecated public class StringEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable {
    ctor @Deprecated public StringEntity(String, String) throws java.io.UnsupportedEncodingException;
    ctor @Deprecated public StringEntity(String) throws java.io.UnsupportedEncodingException;
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public java.io.InputStream getContent() throws java.io.IOException;
    method @Deprecated public long getContentLength();
    method @Deprecated public boolean isRepeatable();
    method @Deprecated public boolean isStreaming();
    method @Deprecated public void writeTo(java.io.OutputStream) throws java.io.IOException;
    field @Deprecated protected final byte[] content;
  }

}

package org.apache.http.impl {

  @Deprecated public abstract class AbstractHttpClientConnection implements org.apache.http.HttpClientConnection {
    ctor @Deprecated public AbstractHttpClientConnection();
    method @Deprecated protected abstract void assertOpen() throws java.lang.IllegalStateException;
    method @Deprecated protected org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer();
    method @Deprecated protected org.apache.http.impl.entity.EntitySerializer createEntitySerializer();
    method @Deprecated protected org.apache.http.HttpResponseFactory createHttpResponseFactory();
    method @Deprecated protected org.apache.http.io.HttpMessageWriter createRequestWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams);
    method @Deprecated protected org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpResponseFactory, org.apache.http.params.HttpParams);
    method @Deprecated protected void doFlush() throws java.io.IOException;
    method @Deprecated public void flush() throws java.io.IOException;
    method @Deprecated public org.apache.http.HttpConnectionMetrics getMetrics();
    method @Deprecated protected void init(org.apache.http.io.SessionInputBuffer, org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams);
    method @Deprecated public boolean isResponseAvailable(int) throws java.io.IOException;
    method @Deprecated public boolean isStale();
    method @Deprecated public void receiveResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public org.apache.http.HttpResponse receiveResponseHeader() throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void sendRequestHeader(org.apache.http.HttpRequest) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public abstract class AbstractHttpServerConnection implements org.apache.http.HttpServerConnection {
    ctor @Deprecated public AbstractHttpServerConnection();
    method @Deprecated protected abstract void assertOpen() throws java.lang.IllegalStateException;
    method @Deprecated protected org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer();
    method @Deprecated protected org.apache.http.impl.entity.EntitySerializer createEntitySerializer();
    method @Deprecated protected org.apache.http.HttpRequestFactory createHttpRequestFactory();
    method @Deprecated protected org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpRequestFactory, org.apache.http.params.HttpParams);
    method @Deprecated protected org.apache.http.io.HttpMessageWriter createResponseWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams);
    method @Deprecated protected void doFlush() throws java.io.IOException;
    method @Deprecated public void flush() throws java.io.IOException;
    method @Deprecated public org.apache.http.HttpConnectionMetrics getMetrics();
    method @Deprecated protected void init(org.apache.http.io.SessionInputBuffer, org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams);
    method @Deprecated public boolean isStale();
    method @Deprecated public void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public org.apache.http.HttpRequest receiveRequestHeader() throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void sendResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void sendResponseHeader(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class DefaultConnectionReuseStrategy implements org.apache.http.ConnectionReuseStrategy {
    ctor @Deprecated public DefaultConnectionReuseStrategy();
    method @Deprecated protected org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator);
    method @Deprecated public boolean keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  @Deprecated public class DefaultHttpClientConnection extends org.apache.http.impl.SocketHttpClientConnection {
    ctor @Deprecated public DefaultHttpClientConnection();
    method @Deprecated public void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException;
  }

  @Deprecated public class DefaultHttpRequestFactory implements org.apache.http.HttpRequestFactory {
    ctor @Deprecated public DefaultHttpRequestFactory();
    method @Deprecated public org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine) throws org.apache.http.MethodNotSupportedException;
    method @Deprecated public org.apache.http.HttpRequest newHttpRequest(String, String) throws org.apache.http.MethodNotSupportedException;
  }

  @Deprecated public class DefaultHttpResponseFactory implements org.apache.http.HttpResponseFactory {
    ctor @Deprecated public DefaultHttpResponseFactory(org.apache.http.ReasonPhraseCatalog);
    ctor @Deprecated public DefaultHttpResponseFactory();
    method @Deprecated protected java.util.Locale determineLocale(org.apache.http.protocol.HttpContext);
    method @Deprecated public org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion, int, org.apache.http.protocol.HttpContext);
    method @Deprecated public org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine, org.apache.http.protocol.HttpContext);
    field @Deprecated protected final org.apache.http.ReasonPhraseCatalog reasonCatalog;
  }

  @Deprecated public class DefaultHttpServerConnection extends org.apache.http.impl.SocketHttpServerConnection {
    ctor @Deprecated public DefaultHttpServerConnection();
    method @Deprecated public void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException;
  }

  @Deprecated public class EnglishReasonPhraseCatalog implements org.apache.http.ReasonPhraseCatalog {
    ctor @Deprecated protected EnglishReasonPhraseCatalog();
    method @Deprecated public String getReason(int, java.util.Locale);
    field @Deprecated public static final org.apache.http.impl.EnglishReasonPhraseCatalog INSTANCE;
  }

  @Deprecated public class HttpConnectionMetricsImpl implements org.apache.http.HttpConnectionMetrics {
    ctor @Deprecated public HttpConnectionMetricsImpl(org.apache.http.io.HttpTransportMetrics, org.apache.http.io.HttpTransportMetrics);
    method @Deprecated public Object getMetric(String);
    method @Deprecated public long getReceivedBytesCount();
    method @Deprecated public long getRequestCount();
    method @Deprecated public long getResponseCount();
    method @Deprecated public long getSentBytesCount();
    method @Deprecated public void incrementRequestCount();
    method @Deprecated public void incrementResponseCount();
    method @Deprecated public void reset();
    method @Deprecated public void setMetric(String, Object);
    field @Deprecated public static final String RECEIVED_BYTES_COUNT = "http.received-bytes-count";
    field @Deprecated public static final String REQUEST_COUNT = "http.request-count";
    field @Deprecated public static final String RESPONSE_COUNT = "http.response-count";
    field @Deprecated public static final String SENT_BYTES_COUNT = "http.sent-bytes-count";
  }

  @Deprecated public class NoConnectionReuseStrategy implements org.apache.http.ConnectionReuseStrategy {
    ctor @Deprecated public NoConnectionReuseStrategy();
    method @Deprecated public boolean keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  @Deprecated public class SocketHttpClientConnection extends org.apache.http.impl.AbstractHttpClientConnection implements org.apache.http.HttpInetConnection {
    ctor @Deprecated public SocketHttpClientConnection();
    method @Deprecated protected void assertNotOpen();
    method @Deprecated protected void assertOpen();
    method @Deprecated protected void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void close() throws java.io.IOException;
    method @Deprecated protected org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated protected org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public java.net.InetAddress getLocalAddress();
    method @Deprecated public int getLocalPort();
    method @Deprecated public java.net.InetAddress getRemoteAddress();
    method @Deprecated public int getRemotePort();
    method @Deprecated protected java.net.Socket getSocket();
    method @Deprecated public int getSocketTimeout();
    method @Deprecated public boolean isOpen();
    method @Deprecated public void setSocketTimeout(int);
    method @Deprecated public void shutdown() throws java.io.IOException;
  }

  @Deprecated public class SocketHttpServerConnection extends org.apache.http.impl.AbstractHttpServerConnection implements org.apache.http.HttpInetConnection {
    ctor @Deprecated public SocketHttpServerConnection();
    method @Deprecated protected void assertNotOpen();
    method @Deprecated protected void assertOpen();
    method @Deprecated protected void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void close() throws java.io.IOException;
    method @Deprecated protected org.apache.http.io.SessionInputBuffer createHttpDataReceiver(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated protected org.apache.http.io.SessionOutputBuffer createHttpDataTransmitter(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public java.net.InetAddress getLocalAddress();
    method @Deprecated public int getLocalPort();
    method @Deprecated public java.net.InetAddress getRemoteAddress();
    method @Deprecated public int getRemotePort();
    method @Deprecated protected java.net.Socket getSocket();
    method @Deprecated public int getSocketTimeout();
    method @Deprecated public boolean isOpen();
    method @Deprecated public void setSocketTimeout(int);
    method @Deprecated public void shutdown() throws java.io.IOException;
  }

}

package org.apache.http.impl.auth {

  @Deprecated public abstract class AuthSchemeBase implements org.apache.http.auth.AuthScheme {
    ctor @Deprecated public AuthSchemeBase();
    method @Deprecated public boolean isProxy();
    method @Deprecated protected abstract void parseChallenge(org.apache.http.util.CharArrayBuffer, int, int) throws org.apache.http.auth.MalformedChallengeException;
    method @Deprecated public void processChallenge(org.apache.http.Header) throws org.apache.http.auth.MalformedChallengeException;
  }

  @Deprecated public class BasicScheme extends org.apache.http.impl.auth.RFC2617Scheme {
    ctor @Deprecated public BasicScheme();
    method @Deprecated public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) throws org.apache.http.auth.AuthenticationException;
    method @Deprecated public static org.apache.http.Header authenticate(org.apache.http.auth.Credentials, String, boolean);
    method @Deprecated public String getSchemeName();
    method @Deprecated public boolean isComplete();
    method @Deprecated public boolean isConnectionBased();
  }

  @Deprecated public class BasicSchemeFactory implements org.apache.http.auth.AuthSchemeFactory {
    ctor @Deprecated public BasicSchemeFactory();
    method @Deprecated public org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams);
  }

  @Deprecated public class DigestScheme extends org.apache.http.impl.auth.RFC2617Scheme {
    ctor @Deprecated public DigestScheme();
    method @Deprecated public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) throws org.apache.http.auth.AuthenticationException;
    method @Deprecated public static String createCnonce();
    method @Deprecated public String getSchemeName();
    method @Deprecated public boolean isComplete();
    method @Deprecated public boolean isConnectionBased();
    method @Deprecated public void overrideParamter(String, String);
  }

  @Deprecated public class DigestSchemeFactory implements org.apache.http.auth.AuthSchemeFactory {
    ctor @Deprecated public DigestSchemeFactory();
    method @Deprecated public org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams);
  }

  @Deprecated public interface NTLMEngine {
    method @Deprecated public String generateType1Msg(String, String) throws org.apache.http.impl.auth.NTLMEngineException;
    method @Deprecated public String generateType3Msg(String, String, String, String, String) throws org.apache.http.impl.auth.NTLMEngineException;
  }

  @Deprecated public class NTLMEngineException extends org.apache.http.auth.AuthenticationException {
    ctor @Deprecated public NTLMEngineException();
    ctor @Deprecated public NTLMEngineException(String);
    ctor @Deprecated public NTLMEngineException(String, Throwable);
  }

  @Deprecated public class NTLMScheme extends org.apache.http.impl.auth.AuthSchemeBase {
    ctor @Deprecated public NTLMScheme(org.apache.http.impl.auth.NTLMEngine);
    method @Deprecated public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) throws org.apache.http.auth.AuthenticationException;
    method @Deprecated public String getParameter(String);
    method @Deprecated public String getRealm();
    method @Deprecated public String getSchemeName();
    method @Deprecated public boolean isComplete();
    method @Deprecated public boolean isConnectionBased();
    method @Deprecated protected void parseChallenge(org.apache.http.util.CharArrayBuffer, int, int) throws org.apache.http.auth.MalformedChallengeException;
  }

  @Deprecated public abstract class RFC2617Scheme extends org.apache.http.impl.auth.AuthSchemeBase {
    ctor @Deprecated public RFC2617Scheme();
    method @Deprecated public String getParameter(String);
    method @Deprecated protected java.util.Map<java.lang.String,java.lang.String> getParameters();
    method @Deprecated public String getRealm();
    method @Deprecated protected void parseChallenge(org.apache.http.util.CharArrayBuffer, int, int) throws org.apache.http.auth.MalformedChallengeException;
  }

  @Deprecated public class UnsupportedDigestAlgorithmException extends java.lang.RuntimeException {
    ctor @Deprecated public UnsupportedDigestAlgorithmException();
    ctor @Deprecated public UnsupportedDigestAlgorithmException(String);
    ctor @Deprecated public UnsupportedDigestAlgorithmException(String, Throwable);
  }

}

package org.apache.http.impl.client {

  @Deprecated public abstract class AbstractAuthenticationHandler implements org.apache.http.client.AuthenticationHandler {
    ctor @Deprecated public AbstractAuthenticationHandler();
    method @Deprecated protected java.util.List<java.lang.String> getAuthPreferences();
    method @Deprecated protected java.util.Map<java.lang.String,org.apache.http.Header> parseChallenges(org.apache.http.Header[]) throws org.apache.http.auth.MalformedChallengeException;
    method @Deprecated public org.apache.http.auth.AuthScheme selectScheme(java.util.Map<java.lang.String,org.apache.http.Header>, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.AuthenticationException;
  }

  @Deprecated public abstract class AbstractHttpClient implements org.apache.http.client.HttpClient {
    ctor @Deprecated protected AbstractHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams);
    method @Deprecated public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor);
    method @Deprecated public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int);
    method @Deprecated public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor);
    method @Deprecated public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int);
    method @Deprecated public void clearRequestInterceptors();
    method @Deprecated public void clearResponseInterceptors();
    method @Deprecated protected abstract org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry();
    method @Deprecated protected abstract org.apache.http.conn.ClientConnectionManager createClientConnectionManager();
    method @Deprecated protected org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor, org.apache.http.conn.ClientConnectionManager, org.apache.http.ConnectionReuseStrategy, org.apache.http.conn.ConnectionKeepAliveStrategy, org.apache.http.conn.routing.HttpRoutePlanner, org.apache.http.protocol.HttpProcessor, org.apache.http.client.HttpRequestRetryHandler, org.apache.http.client.RedirectHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.UserTokenHandler, org.apache.http.params.HttpParams);
    method @Deprecated protected abstract org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy();
    method @Deprecated protected abstract org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy();
    method @Deprecated protected abstract org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry();
    method @Deprecated protected abstract org.apache.http.client.CookieStore createCookieStore();
    method @Deprecated protected abstract org.apache.http.client.CredentialsProvider createCredentialsProvider();
    method @Deprecated protected abstract org.apache.http.protocol.HttpContext createHttpContext();
    method @Deprecated protected abstract org.apache.http.params.HttpParams createHttpParams();
    method @Deprecated protected abstract org.apache.http.protocol.BasicHttpProcessor createHttpProcessor();
    method @Deprecated protected abstract org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler();
    method @Deprecated protected abstract org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner();
    method @Deprecated protected abstract org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler();
    method @Deprecated protected abstract org.apache.http.client.RedirectHandler createRedirectHandler();
    method @Deprecated protected abstract org.apache.http.protocol.HttpRequestExecutor createRequestExecutor();
    method @Deprecated protected abstract org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler();
    method @Deprecated protected abstract org.apache.http.client.UserTokenHandler createUserTokenHandler();
    method @Deprecated protected org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest);
    method @Deprecated public final org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public final org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public final org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public final org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public <T> T execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public <T> T execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public <T> T execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public <T> T execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method @Deprecated public final org.apache.http.auth.AuthSchemeRegistry getAuthSchemes();
    method @Deprecated public final org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy();
    method @Deprecated public final org.apache.http.conn.ClientConnectionManager getConnectionManager();
    method @Deprecated public final org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy();
    method @Deprecated public final org.apache.http.cookie.CookieSpecRegistry getCookieSpecs();
    method @Deprecated public final org.apache.http.client.CookieStore getCookieStore();
    method @Deprecated public final org.apache.http.client.CredentialsProvider getCredentialsProvider();
    method @Deprecated protected final org.apache.http.protocol.BasicHttpProcessor getHttpProcessor();
    method @Deprecated public final org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler();
    method @Deprecated public final org.apache.http.params.HttpParams getParams();
    method @Deprecated public final org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler();
    method @Deprecated public final org.apache.http.client.RedirectHandler getRedirectHandler();
    method @Deprecated public final org.apache.http.protocol.HttpRequestExecutor getRequestExecutor();
    method @Deprecated public org.apache.http.HttpRequestInterceptor getRequestInterceptor(int);
    method @Deprecated public int getRequestInterceptorCount();
    method @Deprecated public org.apache.http.HttpResponseInterceptor getResponseInterceptor(int);
    method @Deprecated public int getResponseInterceptorCount();
    method @Deprecated public final org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner();
    method @Deprecated public final org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler();
    method @Deprecated public final org.apache.http.client.UserTokenHandler getUserTokenHandler();
    method @Deprecated public void removeRequestInterceptorByClass(Class<? extends org.apache.http.HttpRequestInterceptor>);
    method @Deprecated public void removeResponseInterceptorByClass(Class<? extends org.apache.http.HttpResponseInterceptor>);
    method @Deprecated public void setAuthSchemes(org.apache.http.auth.AuthSchemeRegistry);
    method @Deprecated public void setCookieSpecs(org.apache.http.cookie.CookieSpecRegistry);
    method @Deprecated public void setCookieStore(org.apache.http.client.CookieStore);
    method @Deprecated public void setCredentialsProvider(org.apache.http.client.CredentialsProvider);
    method @Deprecated public void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler);
    method @Deprecated public void setKeepAliveStrategy(org.apache.http.conn.ConnectionKeepAliveStrategy);
    method @Deprecated public void setParams(org.apache.http.params.HttpParams);
    method @Deprecated public void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler);
    method @Deprecated public void setRedirectHandler(org.apache.http.client.RedirectHandler);
    method @Deprecated public void setReuseStrategy(org.apache.http.ConnectionReuseStrategy);
    method @Deprecated public void setRoutePlanner(org.apache.http.conn.routing.HttpRoutePlanner);
    method @Deprecated public void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler);
    method @Deprecated public void setUserTokenHandler(org.apache.http.client.UserTokenHandler);
  }

  @Deprecated public class BasicCookieStore implements org.apache.http.client.CookieStore {
    ctor @Deprecated public BasicCookieStore();
    method @Deprecated public void addCookie(org.apache.http.cookie.Cookie);
    method @Deprecated public void addCookies(org.apache.http.cookie.Cookie[]);
    method @Deprecated public void clear();
    method @Deprecated public boolean clearExpired(java.util.Date);
    method @Deprecated public java.util.List<org.apache.http.cookie.Cookie> getCookies();
  }

  @Deprecated public class BasicCredentialsProvider implements org.apache.http.client.CredentialsProvider {
    ctor @Deprecated public BasicCredentialsProvider();
    method @Deprecated public void clear();
    method @Deprecated public org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope);
    method @Deprecated public void setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.Credentials);
  }

  @Deprecated public class BasicResponseHandler implements org.apache.http.client.ResponseHandler<java.lang.String> {
    ctor @Deprecated public BasicResponseHandler();
    method @Deprecated public String handleResponse(org.apache.http.HttpResponse) throws org.apache.http.client.HttpResponseException, java.io.IOException;
  }

  @Deprecated public class ClientParamsStack extends org.apache.http.params.AbstractHttpParams {
    ctor @Deprecated public ClientParamsStack(org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams);
    ctor @Deprecated public ClientParamsStack(org.apache.http.impl.client.ClientParamsStack);
    ctor @Deprecated public ClientParamsStack(org.apache.http.impl.client.ClientParamsStack, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams);
    method @Deprecated public org.apache.http.params.HttpParams copy();
    method @Deprecated public final org.apache.http.params.HttpParams getApplicationParams();
    method @Deprecated public final org.apache.http.params.HttpParams getClientParams();
    method @Deprecated public final org.apache.http.params.HttpParams getOverrideParams();
    method @Deprecated public Object getParameter(String);
    method @Deprecated public final org.apache.http.params.HttpParams getRequestParams();
    method @Deprecated public boolean removeParameter(String);
    method @Deprecated public org.apache.http.params.HttpParams setParameter(String, Object) throws java.lang.UnsupportedOperationException;
    field @Deprecated protected final org.apache.http.params.HttpParams applicationParams;
    field @Deprecated protected final org.apache.http.params.HttpParams clientParams;
    field @Deprecated protected final org.apache.http.params.HttpParams overrideParams;
    field @Deprecated protected final org.apache.http.params.HttpParams requestParams;
  }

  @Deprecated public class DefaultConnectionKeepAliveStrategy implements org.apache.http.conn.ConnectionKeepAliveStrategy {
    ctor @Deprecated public DefaultConnectionKeepAliveStrategy();
    method @Deprecated public long getKeepAliveDuration(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  @Deprecated public class DefaultHttpClient extends org.apache.http.impl.client.AbstractHttpClient {
    ctor @Deprecated public DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams);
    ctor @Deprecated public DefaultHttpClient(org.apache.http.params.HttpParams);
    ctor @Deprecated public DefaultHttpClient();
    method @Deprecated protected org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry();
    method @Deprecated protected org.apache.http.conn.ClientConnectionManager createClientConnectionManager();
    method @Deprecated protected org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy();
    method @Deprecated protected org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy();
    method @Deprecated protected org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry();
    method @Deprecated protected org.apache.http.client.CookieStore createCookieStore();
    method @Deprecated protected org.apache.http.client.CredentialsProvider createCredentialsProvider();
    method @Deprecated protected org.apache.http.protocol.HttpContext createHttpContext();
    method @Deprecated protected org.apache.http.params.HttpParams createHttpParams();
    method @Deprecated protected org.apache.http.protocol.BasicHttpProcessor createHttpProcessor();
    method @Deprecated protected org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler();
    method @Deprecated protected org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner();
    method @Deprecated protected org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler();
    method @Deprecated protected org.apache.http.client.RedirectHandler createRedirectHandler();
    method @Deprecated protected org.apache.http.protocol.HttpRequestExecutor createRequestExecutor();
    method @Deprecated protected org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler();
    method @Deprecated protected org.apache.http.client.UserTokenHandler createUserTokenHandler();
  }

  @Deprecated public class DefaultHttpRequestRetryHandler implements org.apache.http.client.HttpRequestRetryHandler {
    ctor @Deprecated public DefaultHttpRequestRetryHandler(int, boolean);
    ctor @Deprecated public DefaultHttpRequestRetryHandler();
    method @Deprecated public int getRetryCount();
    method @Deprecated public boolean isRequestSentRetryEnabled();
    method @Deprecated public boolean retryRequest(java.io.IOException, int, org.apache.http.protocol.HttpContext);
  }

  @Deprecated public class DefaultProxyAuthenticationHandler extends org.apache.http.impl.client.AbstractAuthenticationHandler {
    ctor @Deprecated public DefaultProxyAuthenticationHandler();
    method @Deprecated public java.util.Map<java.lang.String,org.apache.http.Header> getChallenges(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.MalformedChallengeException;
    method @Deprecated public boolean isAuthenticationRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  @Deprecated public class DefaultRedirectHandler implements org.apache.http.client.RedirectHandler {
    ctor @Deprecated public DefaultRedirectHandler();
    method @Deprecated public java.net.URI getLocationURI(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.ProtocolException;
    method @Deprecated public boolean isRedirectRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  @Deprecated public class DefaultRequestDirector implements org.apache.http.client.RequestDirector {
    ctor @Deprecated public DefaultRequestDirector(org.apache.http.protocol.HttpRequestExecutor, org.apache.http.conn.ClientConnectionManager, org.apache.http.ConnectionReuseStrategy, org.apache.http.conn.ConnectionKeepAliveStrategy, org.apache.http.conn.routing.HttpRoutePlanner, org.apache.http.protocol.HttpProcessor, org.apache.http.client.HttpRequestRetryHandler, org.apache.http.client.RedirectHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.UserTokenHandler, org.apache.http.params.HttpParams);
    method @Deprecated protected org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext);
    method @Deprecated protected boolean createTunnelToProxy(org.apache.http.conn.routing.HttpRoute, int, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated protected boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated protected org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException;
    method @Deprecated protected void establishRoute(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated protected org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated protected void releaseConnection();
    method @Deprecated protected void rewriteRequestURI(org.apache.http.impl.client.RequestWrapper, org.apache.http.conn.routing.HttpRoute) throws org.apache.http.ProtocolException;
    field @Deprecated protected final org.apache.http.conn.ClientConnectionManager connManager;
    field @Deprecated protected final org.apache.http.protocol.HttpProcessor httpProcessor;
    field @Deprecated protected final org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy;
    field @Deprecated protected org.apache.http.conn.ManagedClientConnection managedConn;
    field @Deprecated protected final org.apache.http.params.HttpParams params;
    field @Deprecated protected final org.apache.http.client.RedirectHandler redirectHandler;
    field @Deprecated protected final org.apache.http.protocol.HttpRequestExecutor requestExec;
    field @Deprecated protected final org.apache.http.client.HttpRequestRetryHandler retryHandler;
    field @Deprecated protected final org.apache.http.ConnectionReuseStrategy reuseStrategy;
    field @Deprecated protected final org.apache.http.conn.routing.HttpRoutePlanner routePlanner;
  }

  @Deprecated public class DefaultTargetAuthenticationHandler extends org.apache.http.impl.client.AbstractAuthenticationHandler {
    ctor @Deprecated public DefaultTargetAuthenticationHandler();
    method @Deprecated public java.util.Map<java.lang.String,org.apache.http.Header> getChallenges(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.MalformedChallengeException;
    method @Deprecated public boolean isAuthenticationRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  @Deprecated public class DefaultUserTokenHandler implements org.apache.http.client.UserTokenHandler {
    ctor @Deprecated public DefaultUserTokenHandler();
    method @Deprecated public Object getUserToken(org.apache.http.protocol.HttpContext);
  }

  @Deprecated public class EntityEnclosingRequestWrapper extends org.apache.http.impl.client.RequestWrapper implements org.apache.http.HttpEntityEnclosingRequest {
    ctor @Deprecated public EntityEnclosingRequestWrapper(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.ProtocolException;
    method @Deprecated public boolean expectContinue();
    method @Deprecated public org.apache.http.HttpEntity getEntity();
    method @Deprecated public void setEntity(org.apache.http.HttpEntity);
  }

  @Deprecated public class RedirectLocations {
    ctor @Deprecated public RedirectLocations();
    method @Deprecated public void add(java.net.URI);
    method @Deprecated public boolean contains(java.net.URI);
    method @Deprecated public boolean remove(java.net.URI);
  }

  @Deprecated public class RequestWrapper extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.client.methods.HttpUriRequest {
    ctor @Deprecated public RequestWrapper(org.apache.http.HttpRequest) throws org.apache.http.ProtocolException;
    method @Deprecated public void abort() throws java.lang.UnsupportedOperationException;
    method @Deprecated public int getExecCount();
    method @Deprecated public String getMethod();
    method @Deprecated public org.apache.http.HttpRequest getOriginal();
    method @Deprecated public org.apache.http.ProtocolVersion getProtocolVersion();
    method @Deprecated public org.apache.http.RequestLine getRequestLine();
    method @Deprecated public java.net.URI getURI();
    method @Deprecated public void incrementExecCount();
    method @Deprecated public boolean isAborted();
    method @Deprecated public boolean isRepeatable();
    method @Deprecated public void resetHeaders();
    method @Deprecated public void setMethod(String);
    method @Deprecated public void setProtocolVersion(org.apache.http.ProtocolVersion);
    method @Deprecated public void setURI(java.net.URI);
  }

  @Deprecated public class RoutedRequest {
    ctor @Deprecated public RoutedRequest(org.apache.http.impl.client.RequestWrapper, org.apache.http.conn.routing.HttpRoute);
    method @Deprecated public final org.apache.http.impl.client.RequestWrapper getRequest();
    method @Deprecated public final org.apache.http.conn.routing.HttpRoute getRoute();
    field @Deprecated protected final org.apache.http.impl.client.RequestWrapper request;
    field @Deprecated protected final org.apache.http.conn.routing.HttpRoute route;
  }

  @Deprecated public class TunnelRefusedException extends org.apache.http.HttpException {
    ctor @Deprecated public TunnelRefusedException(String, org.apache.http.HttpResponse);
    method @Deprecated public org.apache.http.HttpResponse getResponse();
  }

}

package org.apache.http.impl.conn {

  @Deprecated public abstract class AbstractClientConnAdapter implements org.apache.http.conn.ManagedClientConnection {
    ctor @Deprecated protected AbstractClientConnAdapter(org.apache.http.conn.ClientConnectionManager, org.apache.http.conn.OperatedClientConnection);
    method @Deprecated public void abortConnection();
    method @Deprecated protected final void assertNotAborted() throws java.io.InterruptedIOException;
    method @Deprecated protected final void assertValid(org.apache.http.conn.OperatedClientConnection);
    method @Deprecated protected void detach();
    method @Deprecated public void flush() throws java.io.IOException;
    method @Deprecated public java.net.InetAddress getLocalAddress();
    method @Deprecated public int getLocalPort();
    method @Deprecated protected org.apache.http.conn.ClientConnectionManager getManager();
    method @Deprecated public org.apache.http.HttpConnectionMetrics getMetrics();
    method @Deprecated public java.net.InetAddress getRemoteAddress();
    method @Deprecated public int getRemotePort();
    method @Deprecated public javax.net.ssl.SSLSession getSSLSession();
    method @Deprecated public int getSocketTimeout();
    method @Deprecated protected org.apache.http.conn.OperatedClientConnection getWrappedConnection();
    method @Deprecated public boolean isMarkedReusable();
    method @Deprecated public boolean isOpen();
    method @Deprecated public boolean isResponseAvailable(int) throws java.io.IOException;
    method @Deprecated public boolean isSecure();
    method @Deprecated public boolean isStale();
    method @Deprecated public void markReusable();
    method @Deprecated public void receiveResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public org.apache.http.HttpResponse receiveResponseHeader() throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void releaseConnection();
    method @Deprecated public void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void sendRequestHeader(org.apache.http.HttpRequest) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void setIdleDuration(long, java.util.concurrent.TimeUnit);
    method @Deprecated public void setSocketTimeout(int);
    method @Deprecated public void unmarkReusable();
  }

  @Deprecated public abstract class AbstractPoolEntry {
    ctor @Deprecated protected AbstractPoolEntry(org.apache.http.conn.ClientConnectionOperator, org.apache.http.conn.routing.HttpRoute);
    method @Deprecated public Object getState();
    method @Deprecated public void layerProtocol(org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void open(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void setState(Object);
    method @Deprecated protected void shutdownEntry();
    method @Deprecated public void tunnelProxy(org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void tunnelTarget(boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    field @Deprecated protected final org.apache.http.conn.ClientConnectionOperator connOperator;
    field @Deprecated protected final org.apache.http.conn.OperatedClientConnection connection;
    field @Deprecated protected volatile org.apache.http.conn.routing.HttpRoute route;
    field @Deprecated protected volatile Object state;
    field @Deprecated protected volatile org.apache.http.conn.routing.RouteTracker tracker;
  }

  @Deprecated public abstract class AbstractPooledConnAdapter extends org.apache.http.impl.conn.AbstractClientConnAdapter {
    ctor @Deprecated protected AbstractPooledConnAdapter(org.apache.http.conn.ClientConnectionManager, org.apache.http.impl.conn.AbstractPoolEntry);
    method @Deprecated protected final void assertAttached();
    method @Deprecated public void close() throws java.io.IOException;
    method @Deprecated public org.apache.http.conn.routing.HttpRoute getRoute();
    method @Deprecated public Object getState();
    method @Deprecated public void layerProtocol(org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void open(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void setState(Object);
    method @Deprecated public void shutdown() throws java.io.IOException;
    method @Deprecated public void tunnelProxy(org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void tunnelTarget(boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    field @Deprecated protected volatile org.apache.http.impl.conn.AbstractPoolEntry poolEntry;
  }

  @Deprecated public class DefaultClientConnection extends org.apache.http.impl.SocketHttpClientConnection implements org.apache.http.conn.OperatedClientConnection {
    ctor @Deprecated public DefaultClientConnection();
    method @Deprecated public final java.net.Socket getSocket();
    method @Deprecated public final org.apache.http.HttpHost getTargetHost();
    method @Deprecated public final boolean isSecure();
    method @Deprecated public void openCompleted(boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void opening(java.net.Socket, org.apache.http.HttpHost) throws java.io.IOException;
    method @Deprecated public void update(java.net.Socket, org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
  }

  @Deprecated public class DefaultClientConnectionOperator implements org.apache.http.conn.ClientConnectionOperator {
    ctor @Deprecated public DefaultClientConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry);
    method @Deprecated public org.apache.http.conn.OperatedClientConnection createConnection();
    method @Deprecated public void openConnection(org.apache.http.conn.OperatedClientConnection, org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated protected void prepareSocket(java.net.Socket, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public void updateSecureConnection(org.apache.http.conn.OperatedClientConnection, org.apache.http.HttpHost, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    field @Deprecated protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
  }

  @Deprecated public class DefaultHttpRoutePlanner implements org.apache.http.conn.routing.HttpRoutePlanner {
    ctor @Deprecated public DefaultHttpRoutePlanner(org.apache.http.conn.scheme.SchemeRegistry);
    method @Deprecated public org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException;
    field @Deprecated protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
  }

  @Deprecated public class DefaultResponseParser extends org.apache.http.impl.io.AbstractMessageParser {
    ctor @Deprecated public DefaultResponseParser(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.HttpResponseFactory, org.apache.http.params.HttpParams);
    method @Deprecated protected org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class IdleConnectionHandler {
    ctor @Deprecated public IdleConnectionHandler();
    method @Deprecated public void add(org.apache.http.HttpConnection, long, java.util.concurrent.TimeUnit);
    method @Deprecated public void closeExpiredConnections();
    method @Deprecated public void closeIdleConnections(long);
    method @Deprecated public boolean remove(org.apache.http.HttpConnection);
    method @Deprecated public void removeAll();
  }

  @Deprecated public class LoggingSessionInputBuffer implements org.apache.http.io.SessionInputBuffer {
    ctor @Deprecated public LoggingSessionInputBuffer(org.apache.http.io.SessionInputBuffer, org.apache.http.impl.conn.Wire);
    method @Deprecated public org.apache.http.io.HttpTransportMetrics getMetrics();
    method @Deprecated public boolean isDataAvailable(int) throws java.io.IOException;
    method @Deprecated public int read(byte[], int, int) throws java.io.IOException;
    method @Deprecated public int read() throws java.io.IOException;
    method @Deprecated public int read(byte[]) throws java.io.IOException;
    method @Deprecated public String readLine() throws java.io.IOException;
    method @Deprecated public int readLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException;
  }

  @Deprecated public class LoggingSessionOutputBuffer implements org.apache.http.io.SessionOutputBuffer {
    ctor @Deprecated public LoggingSessionOutputBuffer(org.apache.http.io.SessionOutputBuffer, org.apache.http.impl.conn.Wire);
    method @Deprecated public void flush() throws java.io.IOException;
    method @Deprecated public org.apache.http.io.HttpTransportMetrics getMetrics();
    method @Deprecated public void write(byte[], int, int) throws java.io.IOException;
    method @Deprecated public void write(int) throws java.io.IOException;
    method @Deprecated public void write(byte[]) throws java.io.IOException;
    method @Deprecated public void writeLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException;
    method @Deprecated public void writeLine(String) throws java.io.IOException;
  }

  @Deprecated public class ProxySelectorRoutePlanner implements org.apache.http.conn.routing.HttpRoutePlanner {
    ctor @Deprecated public ProxySelectorRoutePlanner(org.apache.http.conn.scheme.SchemeRegistry, java.net.ProxySelector);
    method @Deprecated protected java.net.Proxy chooseProxy(java.util.List<java.net.Proxy>, org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext);
    method @Deprecated protected org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException;
    method @Deprecated public org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException;
    method @Deprecated protected String getHost(java.net.InetSocketAddress);
    method @Deprecated public java.net.ProxySelector getProxySelector();
    method @Deprecated public void setProxySelector(java.net.ProxySelector);
    field @Deprecated protected java.net.ProxySelector proxySelector;
    field @Deprecated protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
  }

  @Deprecated public class SingleClientConnManager implements org.apache.http.conn.ClientConnectionManager {
    ctor @Deprecated public SingleClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry);
    method @Deprecated protected final void assertStillUp() throws java.lang.IllegalStateException;
    method @Deprecated public void closeExpiredConnections();
    method @Deprecated public void closeIdleConnections(long, java.util.concurrent.TimeUnit);
    method @Deprecated protected org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry);
    method @Deprecated public org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute, Object);
    method @Deprecated public org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry();
    method @Deprecated public void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit);
    method @Deprecated public final org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, Object);
    method @Deprecated protected void revokeConnection();
    method @Deprecated public void shutdown();
    field @Deprecated public static final String MISUSE_MESSAGE = "Invalid use of SingleClientConnManager: connection still allocated.\nMake sure to release the connection before allocating another one.";
    field @Deprecated protected boolean alwaysShutDown;
    field @Deprecated protected org.apache.http.conn.ClientConnectionOperator connOperator;
    field @Deprecated protected long connectionExpiresTime;
    field @Deprecated protected volatile boolean isShutDown;
    field @Deprecated protected long lastReleaseTime;
    field @Deprecated protected org.apache.http.impl.conn.SingleClientConnManager.ConnAdapter managedConn;
    field @Deprecated protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
    field @Deprecated protected org.apache.http.impl.conn.SingleClientConnManager.PoolEntry uniquePoolEntry;
  }

  @Deprecated protected class SingleClientConnManager.ConnAdapter extends org.apache.http.impl.conn.AbstractPooledConnAdapter {
    ctor @Deprecated protected SingleClientConnManager.ConnAdapter(org.apache.http.impl.conn.SingleClientConnManager.PoolEntry, org.apache.http.conn.routing.HttpRoute);
  }

  @Deprecated protected class SingleClientConnManager.PoolEntry extends org.apache.http.impl.conn.AbstractPoolEntry {
    ctor @Deprecated protected SingleClientConnManager.PoolEntry();
    method @Deprecated protected void close() throws java.io.IOException;
    method @Deprecated protected void shutdown() throws java.io.IOException;
  }

  @Deprecated public class Wire {
    ctor @Deprecated public Wire(org.apache.commons.logging.Log);
    method @Deprecated public boolean enabled();
    method @Deprecated public void input(java.io.InputStream) throws java.io.IOException;
    method @Deprecated public void input(byte[], int, int) throws java.io.IOException;
    method @Deprecated public void input(byte[]) throws java.io.IOException;
    method @Deprecated public void input(int) throws java.io.IOException;
    method @Deprecated public void input(String) throws java.io.IOException;
    method @Deprecated public void output(java.io.InputStream) throws java.io.IOException;
    method @Deprecated public void output(byte[], int, int) throws java.io.IOException;
    method @Deprecated public void output(byte[]) throws java.io.IOException;
    method @Deprecated public void output(int) throws java.io.IOException;
    method @Deprecated public void output(String) throws java.io.IOException;
  }

}

package org.apache.http.impl.conn.tsccm {

  @Deprecated public abstract class AbstractConnPool implements org.apache.http.impl.conn.tsccm.RefQueueHandler {
    ctor @Deprecated protected AbstractConnPool();
    method @Deprecated protected void closeConnection(org.apache.http.conn.OperatedClientConnection);
    method @Deprecated public void closeExpiredConnections();
    method @Deprecated public void closeIdleConnections(long, java.util.concurrent.TimeUnit);
    method @Deprecated public abstract void deleteClosedConnections();
    method @Deprecated public void enableConnectionGC() throws java.lang.IllegalStateException;
    method @Deprecated public abstract void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry, boolean, long, java.util.concurrent.TimeUnit);
    method @Deprecated public final org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(org.apache.http.conn.routing.HttpRoute, Object, long, java.util.concurrent.TimeUnit) throws org.apache.http.conn.ConnectionPoolTimeoutException, java.lang.InterruptedException;
    method @Deprecated protected abstract void handleLostEntry(org.apache.http.conn.routing.HttpRoute);
    method @Deprecated public void handleReference(java.lang.ref.Reference);
    method @Deprecated public abstract org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute, Object);
    method @Deprecated public void shutdown();
    field @Deprecated protected org.apache.http.impl.conn.IdleConnectionHandler idleConnHandler;
    field @Deprecated protected volatile boolean isShutDown;
    field @Deprecated protected java.util.Set<org.apache.http.impl.conn.tsccm.BasicPoolEntryRef> issuedConnections;
    field @Deprecated protected int numConnections;
    field @Deprecated protected final java.util.concurrent.locks.Lock poolLock;
    field @Deprecated protected java.lang.ref.ReferenceQueue<java.lang.Object> refQueue;
  }

  @Deprecated public class BasicPoolEntry extends org.apache.http.impl.conn.AbstractPoolEntry {
    ctor @Deprecated public BasicPoolEntry(org.apache.http.conn.ClientConnectionOperator, org.apache.http.conn.routing.HttpRoute, java.lang.ref.ReferenceQueue<java.lang.Object>);
    method @Deprecated protected final org.apache.http.conn.OperatedClientConnection getConnection();
    method @Deprecated protected final org.apache.http.conn.routing.HttpRoute getPlannedRoute();
    method @Deprecated protected final org.apache.http.impl.conn.tsccm.BasicPoolEntryRef getWeakRef();
  }

  @Deprecated public class BasicPoolEntryRef extends java.lang.ref.WeakReference<org.apache.http.impl.conn.tsccm.BasicPoolEntry> {
    ctor @Deprecated public BasicPoolEntryRef(org.apache.http.impl.conn.tsccm.BasicPoolEntry, java.lang.ref.ReferenceQueue<java.lang.Object>);
    method @Deprecated public final org.apache.http.conn.routing.HttpRoute getRoute();
  }

  @Deprecated public class BasicPooledConnAdapter extends org.apache.http.impl.conn.AbstractPooledConnAdapter {
    ctor @Deprecated protected BasicPooledConnAdapter(org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager, org.apache.http.impl.conn.AbstractPoolEntry);
    method @Deprecated protected org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry();
  }

  @Deprecated public class ConnPoolByRoute extends org.apache.http.impl.conn.tsccm.AbstractConnPool {
    ctor @Deprecated public ConnPoolByRoute(org.apache.http.conn.ClientConnectionOperator, org.apache.http.params.HttpParams);
    method @Deprecated protected org.apache.http.impl.conn.tsccm.BasicPoolEntry createEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool, org.apache.http.conn.ClientConnectionOperator);
    method @Deprecated protected java.util.Queue<org.apache.http.impl.conn.tsccm.BasicPoolEntry> createFreeConnQueue();
    method @Deprecated protected java.util.Map<org.apache.http.conn.routing.HttpRoute,org.apache.http.impl.conn.tsccm.RouteSpecificPool> createRouteToPoolMap();
    method @Deprecated protected java.util.Queue<org.apache.http.impl.conn.tsccm.WaitingThread> createWaitingThreadQueue();
    method @Deprecated public void deleteClosedConnections();
    method @Deprecated protected void deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry);
    method @Deprecated protected void deleteLeastUsedEntry();
    method @Deprecated public void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry, boolean, long, java.util.concurrent.TimeUnit);
    method @Deprecated public int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute);
    method @Deprecated protected org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(org.apache.http.conn.routing.HttpRoute, Object, long, java.util.concurrent.TimeUnit, org.apache.http.impl.conn.tsccm.WaitingThreadAborter) throws org.apache.http.conn.ConnectionPoolTimeoutException, java.lang.InterruptedException;
    method @Deprecated protected org.apache.http.impl.conn.tsccm.BasicPoolEntry getFreeEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool, Object);
    method @Deprecated protected org.apache.http.impl.conn.tsccm.RouteSpecificPool getRoutePool(org.apache.http.conn.routing.HttpRoute, boolean);
    method @Deprecated protected void handleLostEntry(org.apache.http.conn.routing.HttpRoute);
    method @Deprecated protected org.apache.http.impl.conn.tsccm.RouteSpecificPool newRouteSpecificPool(org.apache.http.conn.routing.HttpRoute);
    method @Deprecated protected org.apache.http.impl.conn.tsccm.WaitingThread newWaitingThread(java.util.concurrent.locks.Condition, org.apache.http.impl.conn.tsccm.RouteSpecificPool);
    method @Deprecated protected void notifyWaitingThread(org.apache.http.impl.conn.tsccm.RouteSpecificPool);
    method @Deprecated public org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute, Object);
    field @Deprecated protected java.util.Queue<org.apache.http.impl.conn.tsccm.BasicPoolEntry> freeConnections;
    field @Deprecated protected final int maxTotalConnections;
    field @Deprecated protected final org.apache.http.conn.ClientConnectionOperator operator;
    field @Deprecated protected final java.util.Map<org.apache.http.conn.routing.HttpRoute,org.apache.http.impl.conn.tsccm.RouteSpecificPool> routeToPool;
    field @Deprecated protected java.util.Queue<org.apache.http.impl.conn.tsccm.WaitingThread> waitingThreads;
  }

  @Deprecated public interface PoolEntryRequest {
    method @Deprecated public void abortRequest();
    method @Deprecated public org.apache.http.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long, java.util.concurrent.TimeUnit) throws org.apache.http.conn.ConnectionPoolTimeoutException, java.lang.InterruptedException;
  }

  @Deprecated public interface RefQueueHandler {
    method @Deprecated public void handleReference(java.lang.ref.Reference<?>);
  }

  @Deprecated public class RefQueueWorker implements java.lang.Runnable {
    ctor @Deprecated public RefQueueWorker(java.lang.ref.ReferenceQueue<?>, org.apache.http.impl.conn.tsccm.RefQueueHandler);
    method @Deprecated public void run();
    method @Deprecated public void shutdown();
    field @Deprecated protected final org.apache.http.impl.conn.tsccm.RefQueueHandler refHandler;
    field @Deprecated protected final java.lang.ref.ReferenceQueue<?> refQueue;
    field @Deprecated protected volatile Thread workerThread;
  }

  @Deprecated public class RouteSpecificPool {
    ctor @Deprecated public RouteSpecificPool(org.apache.http.conn.routing.HttpRoute, int);
    method @Deprecated public org.apache.http.impl.conn.tsccm.BasicPoolEntry allocEntry(Object);
    method @Deprecated public void createdEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry);
    method @Deprecated public boolean deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry);
    method @Deprecated public void dropEntry();
    method @Deprecated public void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry);
    method @Deprecated public int getCapacity();
    method @Deprecated public final int getEntryCount();
    method @Deprecated public final int getMaxEntries();
    method @Deprecated public final org.apache.http.conn.routing.HttpRoute getRoute();
    method @Deprecated public boolean hasThread();
    method @Deprecated public boolean isUnused();
    method @Deprecated public org.apache.http.impl.conn.tsccm.WaitingThread nextThread();
    method @Deprecated public void queueThread(org.apache.http.impl.conn.tsccm.WaitingThread);
    method @Deprecated public void removeThread(org.apache.http.impl.conn.tsccm.WaitingThread);
    field @Deprecated protected final java.util.LinkedList<org.apache.http.impl.conn.tsccm.BasicPoolEntry> freeEntries;
    field @Deprecated protected final int maxEntries;
    field @Deprecated protected int numEntries;
    field @Deprecated protected final org.apache.http.conn.routing.HttpRoute route;
    field @Deprecated protected final java.util.Queue<org.apache.http.impl.conn.tsccm.WaitingThread> waitingThreads;
  }

  @Deprecated public class ThreadSafeClientConnManager implements org.apache.http.conn.ClientConnectionManager {
    ctor @Deprecated public ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry);
    method @Deprecated public void closeExpiredConnections();
    method @Deprecated public void closeIdleConnections(long, java.util.concurrent.TimeUnit);
    method @Deprecated protected org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry);
    method @Deprecated protected org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams);
    method @Deprecated public int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute);
    method @Deprecated public int getConnectionsInPool();
    method @Deprecated public org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry();
    method @Deprecated public void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit);
    method @Deprecated public org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, Object);
    method @Deprecated public void shutdown();
    field @Deprecated protected org.apache.http.conn.ClientConnectionOperator connOperator;
    field @Deprecated protected final org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool;
    field @Deprecated protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
  }

  @Deprecated public class WaitingThread {
    ctor @Deprecated public WaitingThread(java.util.concurrent.locks.Condition, org.apache.http.impl.conn.tsccm.RouteSpecificPool);
    method @Deprecated public boolean await(java.util.Date) throws java.lang.InterruptedException;
    method @Deprecated public final java.util.concurrent.locks.Condition getCondition();
    method @Deprecated public final org.apache.http.impl.conn.tsccm.RouteSpecificPool getPool();
    method @Deprecated public final Thread getThread();
    method @Deprecated public void interrupt();
    method @Deprecated public void wakeup();
  }

  @Deprecated public class WaitingThreadAborter {
    ctor @Deprecated public WaitingThreadAborter();
    method @Deprecated public void abort();
    method @Deprecated public void setWaitingThread(org.apache.http.impl.conn.tsccm.WaitingThread);
  }

}

package org.apache.http.impl.cookie {

  @Deprecated public abstract class AbstractCookieAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor @Deprecated public AbstractCookieAttributeHandler();
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public abstract class AbstractCookieSpec implements org.apache.http.cookie.CookieSpec {
    ctor @Deprecated public AbstractCookieSpec();
    method @Deprecated protected org.apache.http.cookie.CookieAttributeHandler findAttribHandler(String);
    method @Deprecated protected org.apache.http.cookie.CookieAttributeHandler getAttribHandler(String);
    method @Deprecated protected java.util.Collection<org.apache.http.cookie.CookieAttributeHandler> getAttribHandlers();
    method @Deprecated public void registerAttribHandler(String, org.apache.http.cookie.CookieAttributeHandler);
  }

  @Deprecated public class BasicClientCookie implements org.apache.http.cookie.ClientCookie java.lang.Cloneable org.apache.http.cookie.SetCookie {
    ctor @Deprecated public BasicClientCookie(String, String);
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public boolean containsAttribute(String);
    method @Deprecated public String getAttribute(String);
    method @Deprecated public String getComment();
    method @Deprecated public String getCommentURL();
    method @Deprecated public String getDomain();
    method @Deprecated public java.util.Date getExpiryDate();
    method @Deprecated public String getName();
    method @Deprecated public String getPath();
    method @Deprecated public int[] getPorts();
    method @Deprecated public String getValue();
    method @Deprecated public int getVersion();
    method @Deprecated public boolean isExpired(java.util.Date);
    method @Deprecated public boolean isPersistent();
    method @Deprecated public boolean isSecure();
    method @Deprecated public void setAttribute(String, String);
    method @Deprecated public void setComment(String);
    method @Deprecated public void setDomain(String);
    method @Deprecated public void setExpiryDate(java.util.Date);
    method @Deprecated public void setPath(String);
    method @Deprecated public void setSecure(boolean);
    method @Deprecated public void setValue(String);
    method @Deprecated public void setVersion(int);
  }

  @Deprecated public class BasicClientCookie2 extends org.apache.http.impl.cookie.BasicClientCookie implements org.apache.http.cookie.SetCookie2 {
    ctor @Deprecated public BasicClientCookie2(String, String);
    method @Deprecated public void setCommentURL(String);
    method @Deprecated public void setDiscard(boolean);
    method @Deprecated public void setPorts(int[]);
  }

  @Deprecated public class BasicCommentHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
    ctor @Deprecated public BasicCommentHandler();
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class BasicDomainHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor @Deprecated public BasicDomainHandler();
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class BasicExpiresHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
    ctor @Deprecated public BasicExpiresHandler(String[]);
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class BasicMaxAgeHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
    ctor @Deprecated public BasicMaxAgeHandler();
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class BasicPathHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor @Deprecated public BasicPathHandler();
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class BasicSecureHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
    ctor @Deprecated public BasicSecureHandler();
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class BestMatchSpec implements org.apache.http.cookie.CookieSpec {
    ctor @Deprecated public BestMatchSpec(String[], boolean);
    ctor @Deprecated public BestMatchSpec();
    method @Deprecated public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
    method @Deprecated public int getVersion();
    method @Deprecated public org.apache.http.Header getVersionHeader();
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated public java.util.List<org.apache.http.cookie.Cookie> parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class BestMatchSpecFactory implements org.apache.http.cookie.CookieSpecFactory {
    ctor @Deprecated public BestMatchSpecFactory();
    method @Deprecated public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
  }

  @Deprecated public class BrowserCompatSpec extends org.apache.http.impl.cookie.CookieSpecBase {
    ctor @Deprecated public BrowserCompatSpec(String[]);
    ctor @Deprecated public BrowserCompatSpec();
    method @Deprecated public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
    method @Deprecated public int getVersion();
    method @Deprecated public org.apache.http.Header getVersionHeader();
    method @Deprecated public java.util.List<org.apache.http.cookie.Cookie> parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
    field @Deprecated protected static final String[] DATE_PATTERNS;
  }

  @Deprecated public class BrowserCompatSpecFactory implements org.apache.http.cookie.CookieSpecFactory {
    ctor @Deprecated public BrowserCompatSpecFactory();
    method @Deprecated public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
  }

  @Deprecated public abstract class CookieSpecBase extends org.apache.http.impl.cookie.AbstractCookieSpec {
    ctor @Deprecated public CookieSpecBase();
    method @Deprecated protected static String getDefaultDomain(org.apache.http.cookie.CookieOrigin);
    method @Deprecated protected static String getDefaultPath(org.apache.http.cookie.CookieOrigin);
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated protected java.util.List<org.apache.http.cookie.Cookie> parse(org.apache.http.HeaderElement[], org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class DateParseException extends java.lang.Exception {
    ctor @Deprecated public DateParseException();
    ctor @Deprecated public DateParseException(String);
  }

  @Deprecated public final class DateUtils {
    method @Deprecated public static String formatDate(java.util.Date);
    method @Deprecated public static String formatDate(java.util.Date, String);
    method @Deprecated public static java.util.Date parseDate(String) throws org.apache.http.impl.cookie.DateParseException;
    method @Deprecated public static java.util.Date parseDate(String, String[]) throws org.apache.http.impl.cookie.DateParseException;
    method @Deprecated public static java.util.Date parseDate(String, String[], java.util.Date) throws org.apache.http.impl.cookie.DateParseException;
    field @Deprecated public static final java.util.TimeZone GMT;
    field @Deprecated public static final String PATTERN_ASCTIME = "EEE MMM d HH:mm:ss yyyy";
    field @Deprecated public static final String PATTERN_RFC1036 = "EEEE, dd-MMM-yy HH:mm:ss zzz";
    field @Deprecated public static final String PATTERN_RFC1123 = "EEE, dd MMM yyyy HH:mm:ss zzz";
  }

  @Deprecated public class NetscapeDomainHandler extends org.apache.http.impl.cookie.BasicDomainHandler {
    ctor @Deprecated public NetscapeDomainHandler();
  }

  @Deprecated public class NetscapeDraftHeaderParser {
    ctor @Deprecated public NetscapeDraftHeaderParser();
    method @Deprecated public org.apache.http.HeaderElement parseHeader(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    field @Deprecated public static final org.apache.http.impl.cookie.NetscapeDraftHeaderParser DEFAULT;
  }

  @Deprecated public class NetscapeDraftSpec extends org.apache.http.impl.cookie.CookieSpecBase {
    ctor @Deprecated public NetscapeDraftSpec(String[]);
    ctor @Deprecated public NetscapeDraftSpec();
    method @Deprecated public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
    method @Deprecated public int getVersion();
    method @Deprecated public org.apache.http.Header getVersionHeader();
    method @Deprecated public java.util.List<org.apache.http.cookie.Cookie> parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
    field @Deprecated protected static final String EXPIRES_PATTERN = "EEE, dd-MMM-yyyy HH:mm:ss z";
  }

  @Deprecated public class NetscapeDraftSpecFactory implements org.apache.http.cookie.CookieSpecFactory {
    ctor @Deprecated public NetscapeDraftSpecFactory();
    method @Deprecated public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
  }

  @Deprecated public class RFC2109DomainHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor @Deprecated public RFC2109DomainHandler();
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class RFC2109Spec extends org.apache.http.impl.cookie.CookieSpecBase {
    ctor @Deprecated public RFC2109Spec(String[], boolean);
    ctor @Deprecated public RFC2109Spec();
    method @Deprecated protected void formatCookieAsVer(org.apache.http.util.CharArrayBuffer, org.apache.http.cookie.Cookie, int);
    method @Deprecated public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
    method @Deprecated protected void formatParamAsVer(org.apache.http.util.CharArrayBuffer, String, String, int);
    method @Deprecated public int getVersion();
    method @Deprecated public org.apache.http.Header getVersionHeader();
    method @Deprecated public java.util.List<org.apache.http.cookie.Cookie> parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class RFC2109SpecFactory implements org.apache.http.cookie.CookieSpecFactory {
    ctor @Deprecated public RFC2109SpecFactory();
    method @Deprecated public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
  }

  @Deprecated public class RFC2109VersionHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
    ctor @Deprecated public RFC2109VersionHandler();
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class RFC2965CommentUrlAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor @Deprecated public RFC2965CommentUrlAttributeHandler();
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class RFC2965DiscardAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor @Deprecated public RFC2965DiscardAttributeHandler();
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class RFC2965DomainAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor @Deprecated public RFC2965DomainAttributeHandler();
    method @Deprecated public boolean domainMatch(String, String);
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class RFC2965PortAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor @Deprecated public RFC2965PortAttributeHandler();
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  @Deprecated public class RFC2965Spec extends org.apache.http.impl.cookie.RFC2109Spec {
    ctor @Deprecated public RFC2965Spec();
    ctor @Deprecated public RFC2965Spec(String[], boolean);
  }

  @Deprecated public class RFC2965SpecFactory implements org.apache.http.cookie.CookieSpecFactory {
    ctor @Deprecated public RFC2965SpecFactory();
    method @Deprecated public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
  }

  @Deprecated public class RFC2965VersionAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor @Deprecated public RFC2965VersionAttributeHandler();
    method @Deprecated public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method @Deprecated public void parse(org.apache.http.cookie.SetCookie, String) throws org.apache.http.cookie.MalformedCookieException;
    method @Deprecated public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

}

package org.apache.http.impl.entity {

  @Deprecated public class EntityDeserializer {
    ctor @Deprecated public EntityDeserializer(org.apache.http.entity.ContentLengthStrategy);
    method @Deprecated public org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpMessage) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated protected org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpMessage) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class EntitySerializer {
    ctor @Deprecated public EntitySerializer(org.apache.http.entity.ContentLengthStrategy);
    method @Deprecated protected java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer, org.apache.http.HttpMessage) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void serialize(org.apache.http.io.SessionOutputBuffer, org.apache.http.HttpMessage, org.apache.http.HttpEntity) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class LaxContentLengthStrategy implements org.apache.http.entity.ContentLengthStrategy {
    ctor @Deprecated public LaxContentLengthStrategy();
    method @Deprecated public long determineLength(org.apache.http.HttpMessage) throws org.apache.http.HttpException;
  }

  @Deprecated public class StrictContentLengthStrategy implements org.apache.http.entity.ContentLengthStrategy {
    ctor @Deprecated public StrictContentLengthStrategy();
    method @Deprecated public long determineLength(org.apache.http.HttpMessage) throws org.apache.http.HttpException;
  }

}

package org.apache.http.impl.io {

  @Deprecated public abstract class AbstractMessageParser implements org.apache.http.io.HttpMessageParser {
    ctor @Deprecated public AbstractMessageParser(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.params.HttpParams);
    method @Deprecated public org.apache.http.HttpMessage parse() throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated protected abstract org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws org.apache.http.HttpException, java.io.IOException, org.apache.http.ParseException;
    method @Deprecated public static org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer, int, int, org.apache.http.message.LineParser) throws org.apache.http.HttpException, java.io.IOException;
    field @Deprecated protected final org.apache.http.message.LineParser lineParser;
  }

  @Deprecated public abstract class AbstractMessageWriter implements org.apache.http.io.HttpMessageWriter {
    ctor @Deprecated public AbstractMessageWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.message.LineFormatter, org.apache.http.params.HttpParams);
    method @Deprecated public void write(org.apache.http.HttpMessage) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated protected abstract void writeHeadLine(org.apache.http.HttpMessage) throws java.io.IOException;
    field @Deprecated protected final org.apache.http.util.CharArrayBuffer lineBuf;
    field @Deprecated protected final org.apache.http.message.LineFormatter lineFormatter;
    field @Deprecated protected final org.apache.http.io.SessionOutputBuffer sessionBuffer;
  }

  @Deprecated public abstract class AbstractSessionInputBuffer implements org.apache.http.io.SessionInputBuffer {
    ctor @Deprecated public AbstractSessionInputBuffer();
    method @Deprecated protected int fillBuffer() throws java.io.IOException;
    method @Deprecated public org.apache.http.io.HttpTransportMetrics getMetrics();
    method @Deprecated protected boolean hasBufferedData();
    method @Deprecated protected void init(java.io.InputStream, int, org.apache.http.params.HttpParams);
    method @Deprecated public int read() throws java.io.IOException;
    method @Deprecated public int read(byte[], int, int) throws java.io.IOException;
    method @Deprecated public int read(byte[]) throws java.io.IOException;
    method @Deprecated public int readLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException;
    method @Deprecated public String readLine() throws java.io.IOException;
  }

  @Deprecated public abstract class AbstractSessionOutputBuffer implements org.apache.http.io.SessionOutputBuffer {
    ctor @Deprecated public AbstractSessionOutputBuffer();
    method @Deprecated public void flush() throws java.io.IOException;
    method @Deprecated protected void flushBuffer() throws java.io.IOException;
    method @Deprecated public org.apache.http.io.HttpTransportMetrics getMetrics();
    method @Deprecated protected void init(java.io.OutputStream, int, org.apache.http.params.HttpParams);
    method @Deprecated public void write(byte[], int, int) throws java.io.IOException;
    method @Deprecated public void write(byte[]) throws java.io.IOException;
    method @Deprecated public void write(int) throws java.io.IOException;
    method @Deprecated public void writeLine(String) throws java.io.IOException;
    method @Deprecated public void writeLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException;
  }

  @Deprecated public class ChunkedInputStream extends java.io.InputStream {
    ctor @Deprecated public ChunkedInputStream(org.apache.http.io.SessionInputBuffer);
    method @Deprecated public org.apache.http.Header[] getFooters();
    method @Deprecated public int read() throws java.io.IOException;
  }

  @Deprecated public class ChunkedOutputStream extends java.io.OutputStream {
    ctor @Deprecated public ChunkedOutputStream(org.apache.http.io.SessionOutputBuffer, int) throws java.io.IOException;
    ctor @Deprecated public ChunkedOutputStream(org.apache.http.io.SessionOutputBuffer) throws java.io.IOException;
    method @Deprecated public void finish() throws java.io.IOException;
    method @Deprecated protected void flushCache() throws java.io.IOException;
    method @Deprecated protected void flushCacheWithAppend(byte[], int, int) throws java.io.IOException;
    method @Deprecated public void write(int) throws java.io.IOException;
    method @Deprecated protected void writeClosingChunk() throws java.io.IOException;
  }

  @Deprecated public class ContentLengthInputStream extends java.io.InputStream {
    ctor @Deprecated public ContentLengthInputStream(org.apache.http.io.SessionInputBuffer, long);
    method @Deprecated public int read() throws java.io.IOException;
  }

  @Deprecated public class ContentLengthOutputStream extends java.io.OutputStream {
    ctor @Deprecated public ContentLengthOutputStream(org.apache.http.io.SessionOutputBuffer, long);
    method @Deprecated public void write(int) throws java.io.IOException;
  }

  @Deprecated public class HttpRequestParser extends org.apache.http.impl.io.AbstractMessageParser {
    ctor @Deprecated public HttpRequestParser(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.HttpRequestFactory, org.apache.http.params.HttpParams);
    method @Deprecated protected org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws org.apache.http.HttpException, java.io.IOException, org.apache.http.ParseException;
  }

  @Deprecated public class HttpRequestWriter extends org.apache.http.impl.io.AbstractMessageWriter {
    ctor @Deprecated public HttpRequestWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.message.LineFormatter, org.apache.http.params.HttpParams);
    method @Deprecated protected void writeHeadLine(org.apache.http.HttpMessage) throws java.io.IOException;
  }

  @Deprecated public class HttpResponseParser extends org.apache.http.impl.io.AbstractMessageParser {
    ctor @Deprecated public HttpResponseParser(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.HttpResponseFactory, org.apache.http.params.HttpParams);
    method @Deprecated protected org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws org.apache.http.HttpException, java.io.IOException, org.apache.http.ParseException;
  }

  @Deprecated public class HttpResponseWriter extends org.apache.http.impl.io.AbstractMessageWriter {
    ctor @Deprecated public HttpResponseWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.message.LineFormatter, org.apache.http.params.HttpParams);
    method @Deprecated protected void writeHeadLine(org.apache.http.HttpMessage) throws java.io.IOException;
  }

  @Deprecated public class HttpTransportMetricsImpl implements org.apache.http.io.HttpTransportMetrics {
    ctor @Deprecated public HttpTransportMetricsImpl();
    method @Deprecated public long getBytesTransferred();
    method @Deprecated public void incrementBytesTransferred(long);
    method @Deprecated public void reset();
    method @Deprecated public void setBytesTransferred(long);
  }

  @Deprecated public class IdentityInputStream extends java.io.InputStream {
    ctor @Deprecated public IdentityInputStream(org.apache.http.io.SessionInputBuffer);
    method @Deprecated public int read() throws java.io.IOException;
  }

  @Deprecated public class IdentityOutputStream extends java.io.OutputStream {
    ctor @Deprecated public IdentityOutputStream(org.apache.http.io.SessionOutputBuffer);
    method @Deprecated public void write(int) throws java.io.IOException;
  }

  @Deprecated public class SocketInputBuffer extends org.apache.http.impl.io.AbstractSessionInputBuffer {
    ctor @Deprecated public SocketInputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method @Deprecated public boolean isDataAvailable(int) throws java.io.IOException;
    method @Deprecated public boolean isStale() throws java.io.IOException;
  }

  @Deprecated public class SocketOutputBuffer extends org.apache.http.impl.io.AbstractSessionOutputBuffer {
    ctor @Deprecated public SocketOutputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException;
  }

}

package org.apache.http.io {

  @Deprecated public interface HttpMessageParser {
    method @Deprecated public org.apache.http.HttpMessage parse() throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public interface HttpMessageWriter {
    method @Deprecated public void write(org.apache.http.HttpMessage) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public interface HttpTransportMetrics {
    method @Deprecated public long getBytesTransferred();
    method @Deprecated public void reset();
  }

  @Deprecated public interface SessionInputBuffer {
    method @Deprecated public org.apache.http.io.HttpTransportMetrics getMetrics();
    method @Deprecated public boolean isDataAvailable(int) throws java.io.IOException;
    method @Deprecated public int read(byte[], int, int) throws java.io.IOException;
    method @Deprecated public int read(byte[]) throws java.io.IOException;
    method @Deprecated public int read() throws java.io.IOException;
    method @Deprecated public int readLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException;
    method @Deprecated public String readLine() throws java.io.IOException;
  }

  @Deprecated public interface SessionOutputBuffer {
    method @Deprecated public void flush() throws java.io.IOException;
    method @Deprecated public org.apache.http.io.HttpTransportMetrics getMetrics();
    method @Deprecated public void write(byte[], int, int) throws java.io.IOException;
    method @Deprecated public void write(byte[]) throws java.io.IOException;
    method @Deprecated public void write(int) throws java.io.IOException;
    method @Deprecated public void writeLine(String) throws java.io.IOException;
    method @Deprecated public void writeLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException;
  }

}

package org.apache.http.message {

  @Deprecated public abstract class AbstractHttpMessage implements org.apache.http.HttpMessage {
    ctor @Deprecated protected AbstractHttpMessage(org.apache.http.params.HttpParams);
    ctor @Deprecated protected AbstractHttpMessage();
    method @Deprecated public void addHeader(org.apache.http.Header);
    method @Deprecated public void addHeader(String, String);
    method @Deprecated public boolean containsHeader(String);
    method @Deprecated public org.apache.http.Header[] getAllHeaders();
    method @Deprecated public org.apache.http.Header getFirstHeader(String);
    method @Deprecated public org.apache.http.Header[] getHeaders(String);
    method @Deprecated public org.apache.http.Header getLastHeader(String);
    method @Deprecated public org.apache.http.params.HttpParams getParams();
    method @Deprecated public org.apache.http.HeaderIterator headerIterator();
    method @Deprecated public org.apache.http.HeaderIterator headerIterator(String);
    method @Deprecated public void removeHeader(org.apache.http.Header);
    method @Deprecated public void removeHeaders(String);
    method @Deprecated public void setHeader(org.apache.http.Header);
    method @Deprecated public void setHeader(String, String);
    method @Deprecated public void setHeaders(org.apache.http.Header[]);
    method @Deprecated public void setParams(org.apache.http.params.HttpParams);
    field @Deprecated protected org.apache.http.message.HeaderGroup headergroup;
    field @Deprecated protected org.apache.http.params.HttpParams params;
  }

  @Deprecated public class BasicHeader implements java.lang.Cloneable org.apache.http.Header {
    ctor @Deprecated public BasicHeader(String, String);
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public org.apache.http.HeaderElement[] getElements() throws org.apache.http.ParseException;
    method @Deprecated public String getName();
    method @Deprecated public String getValue();
  }

  @Deprecated public class BasicHeaderElement implements java.lang.Cloneable org.apache.http.HeaderElement {
    ctor @Deprecated public BasicHeaderElement(String, String, org.apache.http.NameValuePair[]);
    ctor @Deprecated public BasicHeaderElement(String, String);
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public String getName();
    method @Deprecated public org.apache.http.NameValuePair getParameter(int);
    method @Deprecated public org.apache.http.NameValuePair getParameterByName(String);
    method @Deprecated public int getParameterCount();
    method @Deprecated public org.apache.http.NameValuePair[] getParameters();
    method @Deprecated public String getValue();
  }

  @Deprecated public class BasicHeaderElementIterator implements org.apache.http.HeaderElementIterator {
    ctor @Deprecated public BasicHeaderElementIterator(org.apache.http.HeaderIterator, org.apache.http.message.HeaderValueParser);
    ctor @Deprecated public BasicHeaderElementIterator(org.apache.http.HeaderIterator);
    method @Deprecated public boolean hasNext();
    method @Deprecated public final Object next() throws java.util.NoSuchElementException;
    method @Deprecated public org.apache.http.HeaderElement nextElement() throws java.util.NoSuchElementException;
    method @Deprecated public void remove() throws java.lang.UnsupportedOperationException;
  }

  @Deprecated public class BasicHeaderIterator implements org.apache.http.HeaderIterator {
    ctor @Deprecated public BasicHeaderIterator(org.apache.http.Header[], String);
    method @Deprecated protected boolean filterHeader(int);
    method @Deprecated protected int findNext(int);
    method @Deprecated public boolean hasNext();
    method @Deprecated public final Object next() throws java.util.NoSuchElementException;
    method @Deprecated public org.apache.http.Header nextHeader() throws java.util.NoSuchElementException;
    method @Deprecated public void remove() throws java.lang.UnsupportedOperationException;
    field @Deprecated protected final org.apache.http.Header[] allHeaders;
    field @Deprecated protected int currentIndex;
    field @Deprecated protected String headerName;
  }

  @Deprecated public class BasicHeaderValueFormatter implements org.apache.http.message.HeaderValueFormatter {
    ctor @Deprecated public BasicHeaderValueFormatter();
    method @Deprecated protected void doFormatValue(org.apache.http.util.CharArrayBuffer, String, boolean);
    method @Deprecated protected int estimateElementsLen(org.apache.http.HeaderElement[]);
    method @Deprecated protected int estimateHeaderElementLen(org.apache.http.HeaderElement);
    method @Deprecated protected int estimateNameValuePairLen(org.apache.http.NameValuePair);
    method @Deprecated protected int estimateParametersLen(org.apache.http.NameValuePair[]);
    method @Deprecated public static final String formatElements(org.apache.http.HeaderElement[], boolean, org.apache.http.message.HeaderValueFormatter);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement[], boolean);
    method @Deprecated public static final String formatHeaderElement(org.apache.http.HeaderElement, boolean, org.apache.http.message.HeaderValueFormatter);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement, boolean);
    method @Deprecated public static final String formatNameValuePair(org.apache.http.NameValuePair, boolean, org.apache.http.message.HeaderValueFormatter);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair, boolean);
    method @Deprecated public static final String formatParameters(org.apache.http.NameValuePair[], boolean, org.apache.http.message.HeaderValueFormatter);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair[], boolean);
    method @Deprecated protected boolean isSeparator(char);
    method @Deprecated protected boolean isUnsafe(char);
    field @Deprecated public static final org.apache.http.message.BasicHeaderValueFormatter DEFAULT;
    field @Deprecated public static final String SEPARATORS = " ;,:@()<>\\\"/[]?={}\t";
    field @Deprecated public static final String UNSAFE_CHARS = "\"\\";
  }

  @Deprecated public class BasicHeaderValueParser implements org.apache.http.message.HeaderValueParser {
    ctor @Deprecated public BasicHeaderValueParser();
    method @Deprecated protected org.apache.http.HeaderElement createHeaderElement(String, String, org.apache.http.NameValuePair[]);
    method @Deprecated protected org.apache.http.NameValuePair createNameValuePair(String, String);
    method @Deprecated public static final org.apache.http.HeaderElement[] parseElements(String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    method @Deprecated public static final org.apache.http.HeaderElement parseHeaderElement(String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    method @Deprecated public static final org.apache.http.NameValuePair parseNameValuePair(String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    method @Deprecated public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor, char[]);
    method @Deprecated public static final org.apache.http.NameValuePair[] parseParameters(String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    field @Deprecated public static final org.apache.http.message.BasicHeaderValueParser DEFAULT;
  }

  @Deprecated public class BasicHttpEntityEnclosingRequest extends org.apache.http.message.BasicHttpRequest implements org.apache.http.HttpEntityEnclosingRequest {
    ctor @Deprecated public BasicHttpEntityEnclosingRequest(String, String);
    ctor @Deprecated public BasicHttpEntityEnclosingRequest(String, String, org.apache.http.ProtocolVersion);
    ctor @Deprecated public BasicHttpEntityEnclosingRequest(org.apache.http.RequestLine);
    method @Deprecated public boolean expectContinue();
    method @Deprecated public org.apache.http.HttpEntity getEntity();
    method @Deprecated public void setEntity(org.apache.http.HttpEntity);
  }

  @Deprecated public class BasicHttpRequest extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.HttpRequest {
    ctor @Deprecated public BasicHttpRequest(String, String);
    ctor @Deprecated public BasicHttpRequest(String, String, org.apache.http.ProtocolVersion);
    ctor @Deprecated public BasicHttpRequest(org.apache.http.RequestLine);
    method @Deprecated public org.apache.http.ProtocolVersion getProtocolVersion();
    method @Deprecated public org.apache.http.RequestLine getRequestLine();
  }

  @Deprecated public class BasicHttpResponse extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.HttpResponse {
    ctor @Deprecated public BasicHttpResponse(org.apache.http.StatusLine, org.apache.http.ReasonPhraseCatalog, java.util.Locale);
    ctor @Deprecated public BasicHttpResponse(org.apache.http.StatusLine);
    ctor @Deprecated public BasicHttpResponse(org.apache.http.ProtocolVersion, int, String);
    method @Deprecated public org.apache.http.HttpEntity getEntity();
    method @Deprecated public java.util.Locale getLocale();
    method @Deprecated public org.apache.http.ProtocolVersion getProtocolVersion();
    method @Deprecated protected String getReason(int);
    method @Deprecated public org.apache.http.StatusLine getStatusLine();
    method @Deprecated public void setEntity(org.apache.http.HttpEntity);
    method @Deprecated public void setLocale(java.util.Locale);
    method @Deprecated public void setReasonPhrase(String);
    method @Deprecated public void setStatusCode(int);
    method @Deprecated public void setStatusLine(org.apache.http.StatusLine);
    method @Deprecated public void setStatusLine(org.apache.http.ProtocolVersion, int);
    method @Deprecated public void setStatusLine(org.apache.http.ProtocolVersion, int, String);
  }

  @Deprecated public class BasicLineFormatter implements org.apache.http.message.LineFormatter {
    ctor @Deprecated public BasicLineFormatter();
    method @Deprecated public org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.ProtocolVersion);
    method @Deprecated protected void doFormatHeader(org.apache.http.util.CharArrayBuffer, org.apache.http.Header);
    method @Deprecated protected void doFormatRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.RequestLine);
    method @Deprecated protected void doFormatStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.StatusLine);
    method @Deprecated protected int estimateProtocolVersionLen(org.apache.http.ProtocolVersion);
    method @Deprecated public static final String formatHeader(org.apache.http.Header, org.apache.http.message.LineFormatter);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer, org.apache.http.Header);
    method @Deprecated public static final String formatProtocolVersion(org.apache.http.ProtocolVersion, org.apache.http.message.LineFormatter);
    method @Deprecated public static final String formatRequestLine(org.apache.http.RequestLine, org.apache.http.message.LineFormatter);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.RequestLine);
    method @Deprecated public static final String formatStatusLine(org.apache.http.StatusLine, org.apache.http.message.LineFormatter);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.StatusLine);
    method @Deprecated protected org.apache.http.util.CharArrayBuffer initBuffer(org.apache.http.util.CharArrayBuffer);
    field @Deprecated public static final org.apache.http.message.BasicLineFormatter DEFAULT;
  }

  @Deprecated public class BasicLineParser implements org.apache.http.message.LineParser {
    ctor @Deprecated public BasicLineParser(org.apache.http.ProtocolVersion);
    ctor @Deprecated public BasicLineParser();
    method @Deprecated protected org.apache.http.ProtocolVersion createProtocolVersion(int, int);
    method @Deprecated protected org.apache.http.RequestLine createRequestLine(String, String, org.apache.http.ProtocolVersion);
    method @Deprecated protected org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion, int, String);
    method @Deprecated public boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    method @Deprecated public static final org.apache.http.Header parseHeader(String, org.apache.http.message.LineParser) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) throws org.apache.http.ParseException;
    method @Deprecated public static final org.apache.http.ProtocolVersion parseProtocolVersion(String, org.apache.http.message.LineParser) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method @Deprecated public static final org.apache.http.RequestLine parseRequestLine(String, org.apache.http.message.LineParser) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method @Deprecated public static final org.apache.http.StatusLine parseStatusLine(String, org.apache.http.message.LineParser) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method @Deprecated protected void skipWhitespace(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    field @Deprecated public static final org.apache.http.message.BasicLineParser DEFAULT;
    field @Deprecated protected final org.apache.http.ProtocolVersion protocol;
  }

  @Deprecated public class BasicListHeaderIterator implements org.apache.http.HeaderIterator {
    ctor @Deprecated public BasicListHeaderIterator(java.util.List, String);
    method @Deprecated protected boolean filterHeader(int);
    method @Deprecated protected int findNext(int);
    method @Deprecated public boolean hasNext();
    method @Deprecated public final Object next() throws java.util.NoSuchElementException;
    method @Deprecated public org.apache.http.Header nextHeader() throws java.util.NoSuchElementException;
    method @Deprecated public void remove() throws java.lang.UnsupportedOperationException;
    field @Deprecated protected final java.util.List allHeaders;
    field @Deprecated protected int currentIndex;
    field @Deprecated protected String headerName;
    field @Deprecated protected int lastIndex;
  }

  @Deprecated public class BasicNameValuePair implements java.lang.Cloneable org.apache.http.NameValuePair {
    ctor @Deprecated public BasicNameValuePair(String, String);
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public String getName();
    method @Deprecated public String getValue();
  }

  @Deprecated public class BasicRequestLine implements java.lang.Cloneable org.apache.http.RequestLine {
    ctor @Deprecated public BasicRequestLine(String, String, org.apache.http.ProtocolVersion);
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public String getMethod();
    method @Deprecated public org.apache.http.ProtocolVersion getProtocolVersion();
    method @Deprecated public String getUri();
  }

  @Deprecated public class BasicStatusLine implements java.lang.Cloneable org.apache.http.StatusLine {
    ctor @Deprecated public BasicStatusLine(org.apache.http.ProtocolVersion, int, String);
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public org.apache.http.ProtocolVersion getProtocolVersion();
    method @Deprecated public String getReasonPhrase();
    method @Deprecated public int getStatusCode();
  }

  @Deprecated public class BasicTokenIterator implements org.apache.http.TokenIterator {
    ctor @Deprecated public BasicTokenIterator(org.apache.http.HeaderIterator);
    method @Deprecated protected String createToken(String, int, int);
    method @Deprecated protected int findNext(int) throws org.apache.http.ParseException;
    method @Deprecated protected int findTokenEnd(int);
    method @Deprecated protected int findTokenSeparator(int);
    method @Deprecated protected int findTokenStart(int);
    method @Deprecated public boolean hasNext();
    method @Deprecated protected boolean isHttpSeparator(char);
    method @Deprecated protected boolean isTokenChar(char);
    method @Deprecated protected boolean isTokenSeparator(char);
    method @Deprecated protected boolean isWhitespace(char);
    method @Deprecated public final Object next() throws java.util.NoSuchElementException, org.apache.http.ParseException;
    method @Deprecated public String nextToken() throws java.util.NoSuchElementException, org.apache.http.ParseException;
    method @Deprecated public final void remove() throws java.lang.UnsupportedOperationException;
    field @Deprecated public static final String HTTP_SEPARATORS = " ,;=()<>@:\\\"/[]?{}\t";
    field @Deprecated protected String currentHeader;
    field @Deprecated protected String currentToken;
    field @Deprecated protected final org.apache.http.HeaderIterator headerIt;
    field @Deprecated protected int searchPos;
  }

  @Deprecated public class BufferedHeader implements java.lang.Cloneable org.apache.http.FormattedHeader {
    ctor @Deprecated public BufferedHeader(org.apache.http.util.CharArrayBuffer) throws org.apache.http.ParseException;
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public org.apache.http.util.CharArrayBuffer getBuffer();
    method @Deprecated public org.apache.http.HeaderElement[] getElements() throws org.apache.http.ParseException;
    method @Deprecated public String getName();
    method @Deprecated public String getValue();
    method @Deprecated public int getValuePos();
  }

  @Deprecated public class HeaderGroup implements java.lang.Cloneable {
    ctor @Deprecated public HeaderGroup();
    method @Deprecated public void addHeader(org.apache.http.Header);
    method @Deprecated public void clear();
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public boolean containsHeader(String);
    method @Deprecated public org.apache.http.message.HeaderGroup copy();
    method @Deprecated public org.apache.http.Header[] getAllHeaders();
    method @Deprecated public org.apache.http.Header getCondensedHeader(String);
    method @Deprecated public org.apache.http.Header getFirstHeader(String);
    method @Deprecated public org.apache.http.Header[] getHeaders(String);
    method @Deprecated public org.apache.http.Header getLastHeader(String);
    method @Deprecated public org.apache.http.HeaderIterator iterator();
    method @Deprecated public org.apache.http.HeaderIterator iterator(String);
    method @Deprecated public void removeHeader(org.apache.http.Header);
    method @Deprecated public void setHeaders(org.apache.http.Header[]);
    method @Deprecated public void updateHeader(org.apache.http.Header);
  }

  @Deprecated public interface HeaderValueFormatter {
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement[], boolean);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement, boolean);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair, boolean);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair[], boolean);
  }

  @Deprecated public interface HeaderValueParser {
    method @Deprecated public org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
  }

  @Deprecated public interface LineFormatter {
    method @Deprecated public org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.ProtocolVersion);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer, org.apache.http.Header);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.RequestLine);
    method @Deprecated public org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.StatusLine);
  }

  @Deprecated public interface LineParser {
    method @Deprecated public boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    method @Deprecated public org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method @Deprecated public org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
  }

  @Deprecated public class ParserCursor {
    ctor @Deprecated public ParserCursor(int, int);
    method @Deprecated public boolean atEnd();
    method @Deprecated public int getLowerBound();
    method @Deprecated public int getPos();
    method @Deprecated public int getUpperBound();
    method @Deprecated public void updatePos(int);
  }

}

package org.apache.http.params {

  @Deprecated public abstract class AbstractHttpParams implements org.apache.http.params.HttpParams {
    ctor @Deprecated protected AbstractHttpParams();
    method @Deprecated public boolean getBooleanParameter(String, boolean);
    method @Deprecated public double getDoubleParameter(String, double);
    method @Deprecated public int getIntParameter(String, int);
    method @Deprecated public long getLongParameter(String, long);
    method @Deprecated public boolean isParameterFalse(String);
    method @Deprecated public boolean isParameterTrue(String);
    method @Deprecated public org.apache.http.params.HttpParams setBooleanParameter(String, boolean);
    method @Deprecated public org.apache.http.params.HttpParams setDoubleParameter(String, double);
    method @Deprecated public org.apache.http.params.HttpParams setIntParameter(String, int);
    method @Deprecated public org.apache.http.params.HttpParams setLongParameter(String, long);
  }

  @Deprecated public final class BasicHttpParams extends org.apache.http.params.AbstractHttpParams implements java.lang.Cloneable java.io.Serializable {
    ctor @Deprecated public BasicHttpParams();
    method @Deprecated public void clear();
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public org.apache.http.params.HttpParams copy();
    method @Deprecated protected void copyParams(org.apache.http.params.HttpParams);
    method @Deprecated public Object getParameter(String);
    method @Deprecated public boolean isParameterSet(String);
    method @Deprecated public boolean isParameterSetLocally(String);
    method @Deprecated public boolean removeParameter(String);
    method @Deprecated public org.apache.http.params.HttpParams setParameter(String, Object);
    method @Deprecated public void setParameters(String[], Object);
  }

  @Deprecated public interface CoreProtocolPNames {
    field @Deprecated public static final String HTTP_CONTENT_CHARSET = "http.protocol.content-charset";
    field @Deprecated public static final String HTTP_ELEMENT_CHARSET = "http.protocol.element-charset";
    field @Deprecated public static final String ORIGIN_SERVER = "http.origin-server";
    field @Deprecated public static final String PROTOCOL_VERSION = "http.protocol.version";
    field @Deprecated public static final String STRICT_TRANSFER_ENCODING = "http.protocol.strict-transfer-encoding";
    field @Deprecated public static final String USER_AGENT = "http.useragent";
    field @Deprecated public static final String USE_EXPECT_CONTINUE = "http.protocol.expect-continue";
    field @Deprecated public static final String WAIT_FOR_CONTINUE = "http.protocol.wait-for-continue";
  }

  @Deprecated public final class DefaultedHttpParams extends org.apache.http.params.AbstractHttpParams {
    ctor @Deprecated public DefaultedHttpParams(org.apache.http.params.HttpParams, org.apache.http.params.HttpParams);
    method @Deprecated public org.apache.http.params.HttpParams copy();
    method @Deprecated public org.apache.http.params.HttpParams getDefaults();
    method @Deprecated public Object getParameter(String);
    method @Deprecated public boolean removeParameter(String);
    method @Deprecated public org.apache.http.params.HttpParams setParameter(String, Object);
  }

  @Deprecated public abstract class HttpAbstractParamBean {
    ctor @Deprecated public HttpAbstractParamBean(org.apache.http.params.HttpParams);
    field @Deprecated protected final org.apache.http.params.HttpParams params;
  }

  @Deprecated public class HttpConnectionParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor @Deprecated public HttpConnectionParamBean(org.apache.http.params.HttpParams);
    method @Deprecated public void setConnectionTimeout(int);
    method @Deprecated public void setLinger(int);
    method @Deprecated public void setSoTimeout(int);
    method @Deprecated public void setSocketBufferSize(int);
    method @Deprecated public void setStaleCheckingEnabled(boolean);
    method @Deprecated public void setTcpNoDelay(boolean);
  }

  @Deprecated public class HttpProtocolParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor @Deprecated public HttpProtocolParamBean(org.apache.http.params.HttpParams);
    method @Deprecated public void setContentCharset(String);
    method @Deprecated public void setHttpElementCharset(String);
    method @Deprecated public void setUseExpectContinue(boolean);
    method @Deprecated public void setUserAgent(String);
    method @Deprecated public void setVersion(org.apache.http.HttpVersion);
  }

  @Deprecated public final class HttpProtocolParams implements org.apache.http.params.CoreProtocolPNames {
    method @Deprecated public static String getContentCharset(org.apache.http.params.HttpParams);
    method @Deprecated public static String getHttpElementCharset(org.apache.http.params.HttpParams);
    method @Deprecated public static String getUserAgent(org.apache.http.params.HttpParams);
    method @Deprecated public static org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams);
    method @Deprecated public static void setContentCharset(org.apache.http.params.HttpParams, String);
    method @Deprecated public static void setHttpElementCharset(org.apache.http.params.HttpParams, String);
    method @Deprecated public static void setUseExpectContinue(org.apache.http.params.HttpParams, boolean);
    method @Deprecated public static void setUserAgent(org.apache.http.params.HttpParams, String);
    method @Deprecated public static void setVersion(org.apache.http.params.HttpParams, org.apache.http.ProtocolVersion);
    method @Deprecated public static boolean useExpectContinue(org.apache.http.params.HttpParams);
  }

}

package org.apache.http.protocol {

  @Deprecated public class BasicHttpContext implements org.apache.http.protocol.HttpContext {
    ctor @Deprecated public BasicHttpContext();
    ctor @Deprecated public BasicHttpContext(org.apache.http.protocol.HttpContext);
    method @Deprecated public Object getAttribute(String);
    method @Deprecated public Object removeAttribute(String);
    method @Deprecated public void setAttribute(String, Object);
  }

  @Deprecated public final class BasicHttpProcessor implements java.lang.Cloneable org.apache.http.protocol.HttpProcessor org.apache.http.protocol.HttpRequestInterceptorList org.apache.http.protocol.HttpResponseInterceptorList {
    ctor @Deprecated public BasicHttpProcessor();
    method @Deprecated public void addInterceptor(org.apache.http.HttpRequestInterceptor);
    method @Deprecated public void addInterceptor(org.apache.http.HttpRequestInterceptor, int);
    method @Deprecated public void addInterceptor(org.apache.http.HttpResponseInterceptor);
    method @Deprecated public void addInterceptor(org.apache.http.HttpResponseInterceptor, int);
    method @Deprecated public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor);
    method @Deprecated public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int);
    method @Deprecated public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int);
    method @Deprecated public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor);
    method @Deprecated public void clearInterceptors();
    method @Deprecated public void clearRequestInterceptors();
    method @Deprecated public void clearResponseInterceptors();
    method @Deprecated public Object clone() throws java.lang.CloneNotSupportedException;
    method @Deprecated public org.apache.http.protocol.BasicHttpProcessor copy();
    method @Deprecated protected void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor);
    method @Deprecated public org.apache.http.HttpRequestInterceptor getRequestInterceptor(int);
    method @Deprecated public int getRequestInterceptorCount();
    method @Deprecated public org.apache.http.HttpResponseInterceptor getResponseInterceptor(int);
    method @Deprecated public int getResponseInterceptorCount();
    method @Deprecated public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void removeRequestInterceptorByClass(Class);
    method @Deprecated public void removeResponseInterceptorByClass(Class);
    method @Deprecated public void setInterceptors(java.util.List);
    field @Deprecated protected java.util.List requestInterceptors;
    field @Deprecated protected java.util.List responseInterceptors;
  }

  @Deprecated public final class DefaultedHttpContext implements org.apache.http.protocol.HttpContext {
    ctor @Deprecated public DefaultedHttpContext(org.apache.http.protocol.HttpContext, org.apache.http.protocol.HttpContext);
    method @Deprecated public Object getAttribute(String);
    method @Deprecated public org.apache.http.protocol.HttpContext getDefaults();
    method @Deprecated public Object removeAttribute(String);
    method @Deprecated public void setAttribute(String, Object);
  }

  @Deprecated public interface ExecutionContext {
    field @Deprecated public static final String HTTP_CONNECTION = "http.connection";
    field @Deprecated public static final String HTTP_PROXY_HOST = "http.proxy_host";
    field @Deprecated public static final String HTTP_REQUEST = "http.request";
    field @Deprecated public static final String HTTP_REQ_SENT = "http.request_sent";
    field @Deprecated public static final String HTTP_RESPONSE = "http.response";
    field @Deprecated public static final String HTTP_TARGET_HOST = "http.target_host";
  }

  @Deprecated public final class HTTP {
    method @Deprecated public static boolean isWhitespace(char);
    field @Deprecated public static final String ASCII = "ASCII";
    field @Deprecated public static final String CHARSET_PARAM = "; charset=";
    field @Deprecated public static final String CHUNK_CODING = "chunked";
    field @Deprecated public static final String CONN_CLOSE = "Close";
    field @Deprecated public static final String CONN_DIRECTIVE = "Connection";
    field @Deprecated public static final String CONN_KEEP_ALIVE = "Keep-Alive";
    field @Deprecated public static final String CONTENT_ENCODING = "Content-Encoding";
    field @Deprecated public static final String CONTENT_LEN = "Content-Length";
    field @Deprecated public static final String CONTENT_TYPE = "Content-Type";
    field @Deprecated public static final int CR = 13; // 0xd
    field @Deprecated public static final String DATE_HEADER = "Date";
    field @Deprecated public static final String DEFAULT_CONTENT_CHARSET = "ISO-8859-1";
    field @Deprecated public static final String DEFAULT_CONTENT_TYPE = "application/octet-stream";
    field @Deprecated public static final String DEFAULT_PROTOCOL_CHARSET = "US-ASCII";
    field @Deprecated public static final String EXPECT_CONTINUE = "100-continue";
    field @Deprecated public static final String EXPECT_DIRECTIVE = "Expect";
    field @Deprecated public static final int HT = 9; // 0x9
    field @Deprecated public static final String IDENTITY_CODING = "identity";
    field @Deprecated public static final String ISO_8859_1 = "ISO-8859-1";
    field @Deprecated public static final int LF = 10; // 0xa
    field @Deprecated public static final String OCTET_STREAM_TYPE = "application/octet-stream";
    field @Deprecated public static final String PLAIN_TEXT_TYPE = "text/plain";
    field @Deprecated public static final String SERVER_HEADER = "Server";
    field @Deprecated public static final int SP = 32; // 0x20
    field @Deprecated public static final String TARGET_HOST = "Host";
    field @Deprecated public static final String TRANSFER_ENCODING = "Transfer-Encoding";
    field @Deprecated public static final String USER_AGENT = "User-Agent";
    field @Deprecated public static final String US_ASCII = "US-ASCII";
    field @Deprecated public static final String UTF_16 = "UTF-16";
    field @Deprecated public static final String UTF_8 = "UTF-8";
  }

  @Deprecated public interface HttpContext {
    method @Deprecated public Object getAttribute(String);
    method @Deprecated public Object removeAttribute(String);
    method @Deprecated public void setAttribute(String, Object);
    field @Deprecated public static final String RESERVED_PREFIX = "http.";
  }

  @Deprecated public class HttpDateGenerator {
    ctor @Deprecated public HttpDateGenerator();
    method @Deprecated public String getCurrentDate();
    field @Deprecated public static final java.util.TimeZone GMT;
    field @Deprecated public static final String PATTERN_RFC1123 = "EEE, dd MMM yyyy HH:mm:ss zzz";
  }

  @Deprecated public interface HttpExpectationVerifier {
    method @Deprecated public void verify(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException;
  }

  @Deprecated public interface HttpProcessor extends org.apache.http.HttpRequestInterceptor org.apache.http.HttpResponseInterceptor {
  }

  @Deprecated public class HttpRequestExecutor {
    ctor @Deprecated public HttpRequestExecutor();
    method @Deprecated protected boolean canResponseHaveBody(org.apache.http.HttpRequest, org.apache.http.HttpResponse);
    method @Deprecated protected org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated protected org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public org.apache.http.HttpResponse execute(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void postProcess(org.apache.http.HttpResponse, org.apache.http.protocol.HttpProcessor, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void preProcess(org.apache.http.HttpRequest, org.apache.http.protocol.HttpProcessor, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public interface HttpRequestHandler {
    method @Deprecated public void handle(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class HttpRequestHandlerRegistry implements org.apache.http.protocol.HttpRequestHandlerResolver {
    ctor @Deprecated public HttpRequestHandlerRegistry();
    method @Deprecated public org.apache.http.protocol.HttpRequestHandler lookup(String);
    method @Deprecated protected boolean matchUriRequestPattern(String, String);
    method @Deprecated public void register(String, org.apache.http.protocol.HttpRequestHandler);
    method @Deprecated public void setHandlers(java.util.Map);
    method @Deprecated public void unregister(String);
  }

  @Deprecated public interface HttpRequestHandlerResolver {
    method @Deprecated public org.apache.http.protocol.HttpRequestHandler lookup(String);
  }

  @Deprecated public interface HttpRequestInterceptorList {
    method @Deprecated public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor);
    method @Deprecated public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int);
    method @Deprecated public void clearRequestInterceptors();
    method @Deprecated public org.apache.http.HttpRequestInterceptor getRequestInterceptor(int);
    method @Deprecated public int getRequestInterceptorCount();
    method @Deprecated public void removeRequestInterceptorByClass(Class);
    method @Deprecated public void setInterceptors(java.util.List);
  }

  @Deprecated public interface HttpResponseInterceptorList {
    method @Deprecated public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor);
    method @Deprecated public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int);
    method @Deprecated public void clearResponseInterceptors();
    method @Deprecated public org.apache.http.HttpResponseInterceptor getResponseInterceptor(int);
    method @Deprecated public int getResponseInterceptorCount();
    method @Deprecated public void removeResponseInterceptorByClass(Class);
    method @Deprecated public void setInterceptors(java.util.List);
  }

  @Deprecated public class HttpService {
    ctor @Deprecated public HttpService(org.apache.http.protocol.HttpProcessor, org.apache.http.ConnectionReuseStrategy, org.apache.http.HttpResponseFactory);
    method @Deprecated protected void doService(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public org.apache.http.params.HttpParams getParams();
    method @Deprecated protected void handleException(org.apache.http.HttpException, org.apache.http.HttpResponse);
    method @Deprecated public void handleRequest(org.apache.http.HttpServerConnection, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method @Deprecated public void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy);
    method @Deprecated public void setExpectationVerifier(org.apache.http.protocol.HttpExpectationVerifier);
    method @Deprecated public void setHandlerResolver(org.apache.http.protocol.HttpRequestHandlerResolver);
    method @Deprecated public void setHttpProcessor(org.apache.http.protocol.HttpProcessor);
    method @Deprecated public void setParams(org.apache.http.params.HttpParams);
    method @Deprecated public void setResponseFactory(org.apache.http.HttpResponseFactory);
  }

  @Deprecated public class RequestConnControl implements org.apache.http.HttpRequestInterceptor {
    ctor @Deprecated public RequestConnControl();
    method @Deprecated public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class RequestContent implements org.apache.http.HttpRequestInterceptor {
    ctor @Deprecated public RequestContent();
    method @Deprecated public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class RequestDate implements org.apache.http.HttpRequestInterceptor {
    ctor @Deprecated public RequestDate();
    method @Deprecated public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class RequestExpectContinue implements org.apache.http.HttpRequestInterceptor {
    ctor @Deprecated public RequestExpectContinue();
    method @Deprecated public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class RequestTargetHost implements org.apache.http.HttpRequestInterceptor {
    ctor @Deprecated public RequestTargetHost();
    method @Deprecated public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class RequestUserAgent implements org.apache.http.HttpRequestInterceptor {
    ctor @Deprecated public RequestUserAgent();
    method @Deprecated public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class ResponseConnControl implements org.apache.http.HttpResponseInterceptor {
    ctor @Deprecated public ResponseConnControl();
    method @Deprecated public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class ResponseContent implements org.apache.http.HttpResponseInterceptor {
    ctor @Deprecated public ResponseContent();
    method @Deprecated public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class ResponseDate implements org.apache.http.HttpResponseInterceptor {
    ctor @Deprecated public ResponseDate();
    method @Deprecated public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class ResponseServer implements org.apache.http.HttpResponseInterceptor {
    ctor @Deprecated public ResponseServer();
    method @Deprecated public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  @Deprecated public class SyncBasicHttpContext extends org.apache.http.protocol.BasicHttpContext {
    ctor @Deprecated public SyncBasicHttpContext(org.apache.http.protocol.HttpContext);
  }

  @Deprecated public class UriPatternMatcher {
    ctor @Deprecated public UriPatternMatcher();
    method @Deprecated public Object lookup(String);
    method @Deprecated protected boolean matchUriRequestPattern(String, String);
    method @Deprecated public void register(String, Object);
    method @Deprecated public void setHandlers(java.util.Map);
    method @Deprecated public void unregister(String);
  }

}

package org.apache.http.util {

  @Deprecated public final class ByteArrayBuffer {
    ctor @Deprecated public ByteArrayBuffer(int);
    method @Deprecated public void append(byte[], int, int);
    method @Deprecated public void append(int);
    method @Deprecated public void append(char[], int, int);
    method @Deprecated public void append(org.apache.http.util.CharArrayBuffer, int, int);
    method @Deprecated public byte[] buffer();
    method @Deprecated public int byteAt(int);
    method @Deprecated public int capacity();
    method @Deprecated public void clear();
    method @Deprecated public boolean isEmpty();
    method @Deprecated public boolean isFull();
    method @Deprecated public int length();
    method @Deprecated public void setLength(int);
    method @Deprecated public byte[] toByteArray();
  }

  @Deprecated public final class CharArrayBuffer {
    ctor @Deprecated public CharArrayBuffer(int);
    method @Deprecated public void append(char[], int, int);
    method @Deprecated public void append(String);
    method @Deprecated public void append(org.apache.http.util.CharArrayBuffer, int, int);
    method @Deprecated public void append(org.apache.http.util.CharArrayBuffer);
    method @Deprecated public void append(char);
    method @Deprecated public void append(byte[], int, int);
    method @Deprecated public void append(org.apache.http.util.ByteArrayBuffer, int, int);
    method @Deprecated public void append(Object);
    method @Deprecated public char[] buffer();
    method @Deprecated public int capacity();
    method @Deprecated public char charAt(int);
    method @Deprecated public void clear();
    method @Deprecated public void ensureCapacity(int);
    method @Deprecated public int indexOf(int, int, int);
    method @Deprecated public int indexOf(int);
    method @Deprecated public boolean isEmpty();
    method @Deprecated public boolean isFull();
    method @Deprecated public int length();
    method @Deprecated public void setLength(int);
    method @Deprecated public String substring(int, int);
    method @Deprecated public String substringTrimmed(int, int);
    method @Deprecated public char[] toCharArray();
  }

  @Deprecated public final class EncodingUtils {
    method @Deprecated public static byte[] getAsciiBytes(String);
    method @Deprecated public static String getAsciiString(byte[], int, int);
    method @Deprecated public static String getAsciiString(byte[]);
    method @Deprecated public static byte[] getBytes(String, String);
    method @Deprecated public static String getString(byte[], int, int, String);
    method @Deprecated public static String getString(byte[], String);
  }

  @Deprecated public final class EntityUtils {
    method @Deprecated public static String getContentCharSet(org.apache.http.HttpEntity) throws org.apache.http.ParseException;
    method @Deprecated public static byte[] toByteArray(org.apache.http.HttpEntity) throws java.io.IOException;
    method @Deprecated public static String toString(org.apache.http.HttpEntity, String) throws java.io.IOException, org.apache.http.ParseException;
    method @Deprecated public static String toString(org.apache.http.HttpEntity) throws java.io.IOException, org.apache.http.ParseException;
  }

  @Deprecated public final class ExceptionUtils {
    method @Deprecated public static void initCause(Throwable, Throwable);
  }

  @Deprecated public final class LangUtils {
    method @Deprecated public static boolean equals(Object, Object);
    method @Deprecated public static boolean equals(Object[], Object[]);
    method @Deprecated public static int hashCode(int, int);
    method @Deprecated public static int hashCode(int, boolean);
    method @Deprecated public static int hashCode(int, Object);
    field @Deprecated public static final int HASH_OFFSET = 37; // 0x25
    field @Deprecated public static final int HASH_SEED = 17; // 0x11
  }

  @Deprecated public class VersionInfo {
    ctor @Deprecated protected VersionInfo(String, String, String, String, String);
    method @Deprecated protected static final org.apache.http.util.VersionInfo fromMap(String, java.util.Map, ClassLoader);
    method @Deprecated public final String getClassloader();
    method @Deprecated public final String getModule();
    method @Deprecated public final String getPackage();
    method @Deprecated public final String getRelease();
    method @Deprecated public final String getTimestamp();
    method @Deprecated public static final org.apache.http.util.VersionInfo[] loadVersionInfo(String[], ClassLoader);
    method @Deprecated public static final org.apache.http.util.VersionInfo loadVersionInfo(String, ClassLoader);
    field @Deprecated public static final String PROPERTY_MODULE = "info.module";
    field @Deprecated public static final String PROPERTY_RELEASE = "info.release";
    field @Deprecated public static final String PROPERTY_TIMESTAMP = "info.timestamp";
    field @Deprecated public static final String UNAVAILABLE = "UNAVAILABLE";
    field @Deprecated public static final String VERSION_PROPERTY_FILE = "version.properties";
  }

}

